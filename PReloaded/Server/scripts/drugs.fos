// FOnline: 2238
// Rotators
//
// drugs.fos
//

// Original Fallout2 system
// well, not anymore
#include "_macros.fos"
#include "MsgStr.h"

#include "drugs_data.fos"
#include "_colors.fos"
#include "combat_msg.fos"
#include "combat_h.fos"
#include "drugs_h.fos"


import void FloatingHealText(Critter& cr, int healAmount, int reason, int successType = SKILL_CHECK_SUCCESS) from "utils";
import void FloatingHealTextByDrugPid(Critter& cr, int healAmount, uint16 drugPid) from "utils";

import void VerboseAction(Critter& cr, string& text) from "utils";
import void VerboseAction(Critter& cr, Critter& target, string& text) from "utils";

import void AffectPoison(Critter& cr, int value) from "poison";

import void AffectRadiation(Critter& cr, int value) from "radiation";
import void DropRadiation(Critter& cr) from "radiation";

import void ApplyDamage(AttackStruct& attack, Critter& target, uint rounds, bool isCritical, bool intentionally, array<CombatRes>& results, int CriticalChance) from "combat";

/*
   #define DRUG_EFFECT_DIV2_WITHDRAWAL    (1)
   #define DRUG_EFFECT_MUL2_ADDICTION     (2)
   #define DRUG_EFFECT_DIV2_ADDICTION     (4)
 */
#define DRUG_EFFECT_DIV2_DURATION         (8)
#define DRUG_EFFECT_MUL2_DURATION         (16)
#define DRUG_EFFECT_ADDICTION_INFINITE    (32)
#define DRUG_EFFECT_ADDICTION_IGNORE      (64)
#define RATE_TO_STAGE                     # (rate)          ((rate) & 0xFFFFFF)
#define RATE_TO_FLAGS                     # (rate)          ((rate) >> 24)
#define FORM_RATE                         # (stage, flags)  ((((flags) & 0xFF) << 24) | ((stage) & 0xFFFFFF))


// Table offsets
#define TABLE_DRUG_ADDICT                 (0)
#define TABLE_DRUG_PROC                   (1)
#define TABLE_DURATION                    # (stage)      (2 + (stage))
#define TABLE_STAT                        # (stat)           (6 + (stat) * 6)
#define TABLE_AMOUNT                      # (stat, stage)(7 + (stage) + (stat) * 6)

// Dumbed Down Drugs (only two stages)
#define SPECIAL_DRUG                      # (_pid) ((_pid) == PID_MENTATS || (_pid) == PID_BUFFOUT || (_pid) == PID_PSYCHO || (_pid) == PID_JET                 \
                                                     || (_pid) == PID_BEER || (_pid) == PID_BOOZE || (_pid) == PID_GAMMA_GULP_BEER || (_pid) == PID_ROENTGEN_RUM || (_pid) == PID_ROT_GUT \
                                                     || (_pid) == PID_NUKA_COLA || (_pid) == PID_CIGARETTES || (_pid) == PID_RAD_X        \
                                                     || (_pid) == PID_FISH_SALMON || (_pid) == PID_FISH_TUNA || (_pid) == PID_FISH_CATFISH                      \
                                                    )

#define DRUGS_DEBUG_LOGGING_ALLOWED     (false)

void DrugsLog(string@ s) {
    if (DRUGS_DEBUG_LOGGING_ALLOWED) {
        Log("DRUGS: " + s);
    }
}

void UseDrug(Critter& cr, Item& drug)   // Export
{
    uint pid = drug.GetProtoId();
    DrugsLog("UseDrug( + " + cr.Name + ", " + pid + ")");

    //  BNW changes mostly, cutting short some special drugs or mechanics, they don't reach default behavior

    //  interrupt alcohol effects if PE is already 1
    if (cr.Stat[ST_PERCEPTION] <= 1) {
        if (pid == PID_BEER || pid == PID_GAMMA_GULP_BEER || pid == PID_BOOZE || pid == PID_ROENTGEN_RUM || pid == PID_ROT_GUT) {
            string alcoholFailMessage = "Alcohol KO message";
            switch (Random(1, 3)) {
                case 1:
                    alcoholFailMessage = "You are already smashed and feint even from looking at the bottle.";
                    cr.StatBase[ST_CURRENT_AP] = 100 * Random(-5, -2);
                break;
                case 2:
                    alcoholFailMessage = "You are already smashed and even touching the bottle makes you vomit.";
                    cr.StatBase[ST_CURRENT_AP] = 100 * Random(-7, -4);
                break;
                case 3:
                    alcoholFailMessage = "You are so smashed already that even the smell of more alcohol can knock you out.";
                    cr.StatBase[ST_CURRENT_AP] = 100 * Random(-15, -6);
                break;
            }
            cr.Say(SAY_NETMSG, "|" + COLOR_ORANGE + " " + alcoholFailMessage);
            cr.ToKnockout(KNOCKOUT_ANIM2_DEFAULT(true), 0, cr.HexX, cr.HexY);
            return;
        }
    }

    //  Mentats and Buffout exclude each other
    if (pid == PID_BUFFOUT && IsDrugEffect(cr, PID_MENTATS)) {
        cr.Say(SAY_NETMSG, "You cannot take this with Mentats.");
        return;
    }
    if (pid == PID_MENTATS && IsDrugEffect(cr, PID_BUFFOUT)) {
        cr.Say(SAY_NETMSG, "You cannot take this with Buffout.");
        return;
    }
    //  Cannot spam drink water
    if ((pid == PID_WATERBAG || pid == PID_BOTTLE_FULL) && (IsDrugEffect(cr, PID_WATERBAG) || IsDrugEffect(cr, PID_BOTTLE_FULL))) {
        cr.Say(SAY_NETMSG, "You are not thirsty.");
        return;
    }

    if (pid == PID_PSYCHO && IsDrugEffect(cr, PID_PSYCHO)) {
        DrugsLog("UseDrug Psycho - Already under effect (" + cr.Name + ", " + pid + ")");
        string psychoFailMessage = "Psycho KO message";
        switch (Random(1, 3)) {
            case 1:
                psychoFailMessage = "That needle stings.";
                cr.StatBase[ST_CURRENT_AP] = 100 * Random(-5, -2);
            break;
            case 2:
                psychoFailMessage = "Overdose.";
                cr.StatBase[ST_CURRENT_AP] = 100 * Random(-7, -4);
            break;
            case 3:
                psychoFailMessage = "Overdose.";
                cr.StatBase[ST_CURRENT_AP] = 100 * Random(-15, -6);
            break;
        }
        cr.Say(SAY_NETMSG, "|" + COLOR_ORANGE + " " + psychoFailMessage);
        cr.ToKnockout(KNOCKOUT_ANIM2_DEFAULT(true), 0, cr.HexX, cr.HexY);
        return;
    } else {
        DrugsLog("UseDrug Psycho - NOT under effect (" + cr.Name + ", " + pid + ")");
    }

    SetDrug(cr, pid);
    if (pid == PID_PSYCHO) {
        GameVar@ psychoDoseVar = GetLocalVar(LVAR_psycho_dose, cr.Id);
        if (valid(psychoDoseVar)) {
            psychoDoseVar = psychoDoseVar + 1;
            int psychoFullDosage = 10;
            if (cr.ParamBase[TRAIT_CHEM_RELIANT] > 0) {
                psychoFullDosage = 20;
            }
            if (psychoDoseVar >= psychoFullDosage) {
                psychoDoseVar = 0;
                cr.Say(SAY_NETMSG, "You used up all the dosage left in that Psycho.");
                _SubItem(drug, 1);
            } else {
                if (psychoDoseVar.GetValue() < psychoFullDosage / 4) {
                    cr.Say(SAY_NETMSG, "You used up some doses of Psycho.");
                } else if (psychoDoseVar.GetValue() < psychoFullDosage / 2) {
                    cr.Say(SAY_NETMSG, "You used up almost half of the Psycho's doses.");
                } else if (psychoDoseVar.GetValue() < psychoFullDosage * 3 / 4) {
                    cr.Say(SAY_NETMSG, "You used up more than half of the Psycho doses.");
                } else {
                    cr.Say(SAY_NETMSG, "You used up most of the Psycho's doses.");
                }
            }
        }
    } else {
        _SubItem(drug, 1);
    }
    if(pid == PID_STIMPAK || pid == PID_SUPER_STIMPAK)
    {
        if (/*cr.GetMapProtoId() != MAP_Arena && */Random(0, 1) == 1) {
            cr.AddItem(PID_HYPODERMIC_NEEDLE, 1);
        }
    }
    else if(pid == PID_CIGARETTES)
    {
        VerboseAction(cr, "lights a cigarette");
        cr.PlaySound("smoking.ogg", true);
    }
    else if(pid == PID_BEER || pid == PID_GAMMA_GULP_BEER ||
            pid == PID_NUKA_COLA ||
            pid == PID_WATERBAG ||
            pid == PID_BOTTLE_FULL ||
            pid == PID_BOOZE ||
            pid == PID_ROENTGEN_RUM ||
            pid == PID_ROT_GUT)
    {
        string item = "something";
        uint16 freeItem = 0;

        if(pid == PID_BEER || pid == PID_GAMMA_GULP_BEER)
        {
            if(Random(1, 100) <= 15)
                item = "warm beer";
            else
                item = "beer";
            freeItem = PID_BOTTLE_CAPS;
            cr.PlaySound("beer.acm", true);
        }
        else if(pid == PID_NUKA_COLA)
        {
            item = "nuka-cola";
            freeItem = PID_BOTTLE_CAPS;
            cr.PlaySound("nukacola.ogg", true);
        }
        else if(pid == PID_WATERBAG || pid == PID_BOTTLE_FULL)
        {
            item = "water";
            if(pid == PID_WATERBAG)
                freeItem = PID_WATERBAG_EMPTY;
            else if(pid == PID_BOTTLE_FULL)
                freeItem = PID_BOTTLE_EMPTY;
        }
        else if(pid == PID_BOOZE)
            item = "booze";
        else if(pid == PID_ROENTGEN_RUM)
        {
            item = "rum";
            if(Random(1, 100) == 100)
                item += "**  **Yarr!";
        }

        VerboseAction(cr, "drinks " + item);
        if(freeItem > 0)
            cr.AddItem(freeItem, 1);
    }

    // addicts
    else if(pid == PID_JET)
	{
        VerboseAction(cr, "inhales jet");
        if(Random(0, 1) == 0) cr.AddItem(PID_EMPTY_JET, 1);
    }
    else if(pid == PID_PSYCHO)
        VerboseAction(cr, "injects psycho");
    else if(pid == PID_BUFFOUT)
        VerboseAction(cr, "swallows buffout");
    else if(pid == PID_MENTATS)
        VerboseAction(cr, "swallows mentats");
    else if(pid == PID_JET_ANTIDOTE)
        VerboseAction(cr, "drinks drug antidote");

    // adventurers
    else if(pid == PID_HEALING_POWDER) {
        //VerboseAction(cr, "uses healing powder");
    } else if(pid == PID_RAD_X)
        VerboseAction(cr, "swallows rad-x");
    else if(pid == PID_RADAWAY)
        VerboseAction(cr, "injects radaway");
    else if(pid == PID_ANTIDOTE)
        VerboseAction(cr, "drinks antidote");

    // other
    else if(pid == PID_COOKIE)
        VerboseAction(cr, "eats a " + ((Random(0, 10) == 0) ? "delicious " : "") + "cookie");
    else if(pid == PID_IGUANA_ON_A_STICK)
        VerboseAction(cr, "eats iguana");
    else if(pid == PID_MUTATED_FRUIT)
        VerboseAction(cr, "eats a fruit");
    else if(pid == PID_MEAT_ON_A_STICK)
        VerboseAction(cr, "eats some meat");
    else if(pid == PID_MUTATED_TOE || pid == PID_MASTICATORS_EAR || pid == PID_PLAYERS_EAR)
        VerboseAction(cr, "eats something disgusting");
    else  if (pid == PID_FISH_CATFISH || pid == PID_FISH_TUNA || pid == PID_FISH_SALMON)
        VerboseAction(cr, "eats a raw " + ((Random(0, 10) == 0) ? "tasty " : "") + "fish");
}

void UseDrugOn(Critter& cr, Critter& onCr, Item& drug)   // Export
{
    if(onCr.IsDead())
    {
        cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_NORESSURECT);
        return;
    }

    uint pid = drug.GetProtoId();
    bool isGoodDrug = (pid == PID_STIMPAK || pid == PID_SUPER_STIMPAK ||
                       pid == PID_RADAWAY || pid == PID_WATERBAG || pid == PID_BOTTLE_FULL || pid == PID_HEALING_POWDER ||
                       pid == PID_ANTIDOTE || pid == PID_RAD_X);

    if(isGoodDrug /* || onCr.IsKnockout() || Random(0,cr.Skill[SK_FIRST_AID])>onCr.Stat[ST_PERCEPTION]*20*/)
    {
        onCr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_DRUG_USE_ON_SUCC);
        SetDrug(onCr, drug.GetProtoId());
        _SubItem(drug, 1);

        if (pid == PID_STIMPAK || pid == PID_SUPER_STIMPAK) {
            if (/*cr.GetMapProtoId() != MAP_Arena && */Random(0, 1) == 1) {
                cr.AddItem(PID_HYPODERMIC_NEEDLE, 1);
            }
        } else if(pid == PID_HEALING_POWDER) {
            //VerboseAction(cr, onCr, "uses healing powder on TARGET");
        } else if(pid == PID_RAD_X)
            VerboseAction(cr, onCr, "uses rad-x on TARGET");
        else if(pid == PID_RADAWAY)
            VerboseAction(cr, onCr, "uses radaway on TARGET");
        else if(pid == PID_ANTIDOTE)
            VerboseAction(cr, onCr, "gives antidote to TARGET");
        else if(pid == PID_WATERBAG || pid == PID_BOTTLE_FULL)
        {
            VerboseAction(cr, onCr, "gives some water to TARGET");
            if(pid == PID_WATERBAG)
                cr.AddItem(PID_WATERBAG_EMPTY, 1);
            else if(pid == PID_BOTTLE_FULL)
                cr.AddItem(PID_BOTTLE_EMPTY, 1);
        }
    }
    else
    {
        onCr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_DRUG_USE_ON_FAIL);
    }
}

void DropDrugsEffectsHinkley(Critter& cr)
{
    cr.Say(SAY_NETMSG, "Clearing Hinkley drugs.");
    array<int>  identifiers;
    array<uint> indexes;
    array<uint> rates;

    uint        count = cr.GetTimeEvents(DrugsIdentifiers, identifiers, indexes, null, rates);
    for(uint i = 0; i < count; i++)
    {
        if(identifiers[i] != PID_RADAWAY && identifiers[i] != PID_RAD_X)
        {
            DropDrug(cr, identifiers[i], RATE_TO_STAGE(rates[i]));
            cr.EraseTimeEvents(identifiers[i]);
        }
    }
}

bool IsDrugEffect(Critter& cr, int drugIdentifier) {
    array<int>  identifiers;
    array<uint> rates;
    uint        count = cr.GetTimeEvents(DrugsIdentifiers, identifiers, null, null, rates);
    for (uint i = 0; i < count; i++) {
        if (identifiers[i] == drugIdentifier) {
            return true;
        }
    }
    return false;
}

void DropDrugEffects(Critter& cr)   // Export
{
    DropDrugEffects(cr, true);
}

void DropDrugEffects(Critter& cr, bool dropAddictions)
{
    cr.Say(SAY_NETMSG, "Clearing effects of drugs.");
    // Clear effects of all active drugs
    // Drop
    array<int>  identifiers;
    array<uint> rates;
    uint        count = cr.GetTimeEvents(DrugsIdentifiers, identifiers, null, null, rates);
    for (uint i = 0; i < count; i++) {
        if (identifiers[i] != PID_PSYCHO && identifiers[i] != PID_WATERBAG && identifiers[i] != PID_BOTTLE_FULL) {
            DrugsLog("DropDrugEffects :: i = " + i + ", identifier = " + identifiers[i]);
            DropDrug(cr, identifiers[i], RATE_TO_STAGE(rates[i]));
            cr.EraseTimeEvents(identifiers[i]);
        } else {
            DrugsLog("DropDrugEffects :: NOT DROPING -> i = " + i + ", identifier = " + identifiers[i]);
        }
    }
    // Erase all events
    // cr.EraseTimeEvents(DrugsIdentifiers);
    // Unset addictions perks

    if (dropAddictions)
        for (uint i = ADDICTION_BEGIN; i <= ADDICTION_END; i++)
            cr.AddictionBase[i] = 0;
}

void SetDrug(Critter& cr, uint16 drugPid) {
    // Special drugs
    DrugsLog("UseDrug (" + cr.Name + ", " + drugPid + ")");

    if (drugPid == PID_JET_ANTIDOTE)
    {
    /*
        array<int>  identifiers;
        array<uint> rates;
        uint        count = cr.GetTimeEvents(DrugsIdentifiers, identifiers, null, null, rates);
        for(uint i = 0; i < count; i++)
            if(RATE_TO_STAGE(rates[i]) == 4)
            {
                DropDrug(cr, identifiers[i], RATE_TO_STAGE(rates[i]));
                cr.EraseTimeEvents(identifiers[i]);
            }

        int remCnt = 0;
        for(uint i = ADDICTION_BEGIN; i <= ADDICTION_END; i++)
            if(cr.AddictionBase[i] != 0)
            {
                cr.AddictionBase[i] = 0;
                ++remCnt;
            }

        if(remCnt > 0)
            cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_DRUG_ADDICTION_END);
        else
            cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_DRUG_NOTHING_HAPPENS);
    */
        DropDrugEffects(cr, true);

        return;
    }

    if (drugPid == PID_STIMPAK || drugPid == PID_SUPER_STIMPAK || drugPid == PID_HEALING_POWDER || drugPid == PID_HYPO) {
        array<int>  identifiers;
        array<uint> rates;
        uint        count = cr.GetTimeEvents(DrugsIdentifiers, identifiers, null, null, rates);
        for (uint i = 0; i < count; i++) {
            if (identifiers[i] == int(drugPid)) {
                //cr.Say(SAY_NETMSG, "Reseting drug with PID: " + drugPid);
                DropDrug(cr, identifiers[i], RATE_TO_STAGE(rates[i]));
                cr.EraseTimeEvents(drugPid);
            }
        }
    }

    if (drugPid == PID_WATERBAG || drugPid == PID_BOTTLE_FULL) {
        array<int>  identifiers;
        array<uint> rates;
        uint        count = cr.GetTimeEvents(DrugsIdentifiers, identifiers, null, null, rates);
        for (uint i = 0; i < count; i++) {
            if (identifiers[i] == int(drugPid)) {
                DrugsLog("DropDrug( + " + cr.Name + ", " + drugPid + ")");
                DropDrug(cr, identifiers[i], RATE_TO_STAGE(rates[i]));
                cr.EraseTimeEvents(drugPid);
            }
        }
    }

    //  BNW: Psycho is a special drug, with lower CD and more impact
    if (drugPid == PID_PSYCHO) {
        cr.AddTimeEvent("cte_Psycho", 0, drugPid, 1);
        int roll = Random(1, 10);
        if (roll == 10) {
            cr.RunClientScript("client_utils@_playSound_unsafe", 0, 0, 0, "insane2.ogg", null);
        } else {
            cr.RunClientScript("client_utils@_playSound_unsafe", 0, 0, 0, "psycho1.ogg", null);
        }
        cr.RunClientScript("client/client_psychoFx@_psychoActivate_unsafe", 0, 0, 0, "", null);

        return;
    }


    // Chem flags
    uint flags = 0;

    // todo:
    if(cr.Trait[TRAIT_FAST_METABOLISM] != 0)
        SETFLAG(flags, DRUG_EFFECT_DIV2_DURATION);
    if(cr.Trait[TRAIT_CHEM_RELIANT] != 0)
    {
        SETFLAG(flags, DRUG_EFFECT_MUL2_DURATION);
        //SETFLAG(flags, DRUG_EFFECT_ADDICTION_INFINITE);
    }

    /*
    if (drugPid == PID_WATERBAG || drugPid == PID_BOTTLE_FULL) {
        SETFLAG(flags, DRUG_EFFECT_ADDICTION_IGNORE);
    }*/

    // Other drugs
    array<uint> indexes;
    array<uint> rates;
    uint        count = cr.GetTimeEvents(drugPid, indexes, null, rates);
    int         index = GetDrugTableIndex(drugPid);
    DrugsLog("GetTimeEvents() count = " + count);
    DrugsLog("GetDrugTableIndex() = " + index + " index / 36 = " + (index / 36));

    // Check
    if(DrugEffects[index + TABLE_DRUG_ADDICT] >= 0 || drugPid == PID_RAD_X)     // Addiction perk availability
    {

        bool isBlocked = false;

        if(SPECIAL_DRUG(drugPid))
        {
            for(uint i = 0; i < count; i++)
            {
                uint stage = RATE_TO_STAGE(rates[i]);
                if(stage <= 1)
                {
                    isBlocked = true;
                    break;
                }
            }
        }
        else
        {
            uint positive = 0;
            uint negative = 0;
            for(uint i = 0; i < count; i++)
            {
                uint stage = RATE_TO_STAGE(rates[i]);
                if(stage <= 1)
                    positive++;
                else if(stage == 2)
                    negative++;
            }
            isBlocked = positive >= 2 - negative / 2;
        }

        /*
        if (drugPid == PID_BEER || drugPid == PID_GAMMA_GULP_BEER || drugPid == PID_BOOZE || drugPid == PID_BEER || drugPid == PID_BEER) {
            RefreshDrug(cr, drugPid, FORM_RATE(0, flags));
            isBlocked = true;
        }*/

        if(isBlocked)
        {
            if(drugPid != PID_RADAWAY)
            {
                RefreshDrug(cr, drugPid, FORM_RATE(0, flags));
                UpdateDrugs(cr);
            }
            return;
        }
    }

    // Clear active addictions
    uint deleted = 0;   // After erase indexes decrement on one position
    for(uint i = 0; i < count; i++)
    {
        uint stage = RATE_TO_STAGE(rates[i]);
        if(stage >= 2)
        {
            DropDrug(cr, drugPid, stage);
            cr.EraseTimeEvent(indexes[i] - deleted);
            deleted++;
        }
    }

    // Set critter time event
    cr.AddTimeEvent("cte_Drug", 0, drugPid, FORM_RATE(0, flags));
}

uint ProcessDrug(Critter& cr, uint16 drugPid, uint& rate)
{
    uint stage = RATE_TO_STAGE(rate);
    uint flags = RATE_TO_FLAGS(rate);

    if(cr.IsDead())
        return REAL_MINUTE(5);                 // Stop drug processing
    if(drugPid == PID_JET && stage >= 4)
        return REAL_YEAR(25);                  // Only after Jet Antidote was used

    int  index = GetDrugTableIndex(drugPid);
    uint duration = 0;
    uint healDrugDuration = 0;

    if(stage == 0 ||  // Instant effect
       stage == 1 ||  // Withdrawal
       stage == 2 ||  // Normalize
       stage == 3 ||  // Addiction begin
       stage == 4)    // Addiction end
    {
        if(!FLAG(flags, DRUG_EFFECT_ADDICTION_IGNORE) || stage < 3)
        {
            for(uint i = 0; i < 5; i++)
            {
                int stat = DrugEffects[index + TABLE_STAT(i)];
                int amount = DrugEffects[index + TABLE_AMOUNT(i, stage)];
                if(i == 1 && DrugEffects[index + TABLE_STAT(0)] == -2)
                    amount = Random(DrugEffects[index + TABLE_AMOUNT(0, stage)], amount);                                                        // Take first
                if(stat < 0)
                    continue;

                int statVal = cr.Param[stat];
                if(stat < STAT_EXT_BEGIN)
                    cr.StatBase[STAT_EXT_BEGIN + stat] += amount;
                else if(stat == ST_CURRENT_HP)
                {
                    if(drugPid == PID_MUTATED_FRUIT && cr.Perk[PE_WAY_OF_THE_FRUIT] != 0)
                        amount = 16;
                    if (amount > 0 && cr.Trait[TRAIT_CHEM_RELIANT] != 0) {
                        if (drugPid == PID_STIMPAK || drugPid == PID_HEALING_POWDER) {
                            if (stage == 0) {
                                amount = (amount * 3) / 4;
                            } else {
                                amount = (amount * 5) / 4;
                            }
                        } else {
                            amount = (amount * 3) / 4;
                        }

                    }
                    if (amount == 0 && cr.Trait[TRAIT_CHEM_RELIANT] != 0) {
                        if ((drugPid == PID_SUPER_STIMPAK || drugPid == PID_HYPO) && (stage == 1 || stage == 2)) {
                            amount = (DrugEffects[index + TABLE_AMOUNT(i, 0)] * 3) / 8;
                        }
                    }


                    //  BNW MECHANICS CHANGE: see issue #110 https://github.com/Sasabmeg/FOnline-BraveNewWorld/issues/110
                    //  Plasma damage will reduce healing for a short period of time, chem reliant ignores effect
                    if (cr.ParamBase[TO_EX_IRREMEDIABLE] + PLASMA_EFFECT_LINGER_TIME > int(GetTick())) {
                        if (cr.ParamBase[ST_EX_IRREMEDIABLE] > 0) {
                            if (cr.Trait[TRAIT_CHEM_RELIANT] == 0) {
                                float healFactor = float(CLAMP(100 - cr.ParamBase[ST_EX_IRREMEDIABLE], 50, 100)) / 100;
                                int oldAmount = amount;
                                amount = amount * healFactor;
                                //cr.Say(SAY_NETMSG, "Heal factor = " + healFactor + ", irremediable% = " + cr.ParamBase[ST_EX_IRREMEDIABLE] + ", oldAmount = " + oldAmount + ", newAmount = " + amount);
                                //Log("Heal factor = " + healFactor + ", irremediable% = " + cr.ParamBase[ST_EX_IRREMEDIABLE] + ", oldAmount = " + oldAmount + ", newAmount = " + amount);
                            } else {
                                float healFactor = float(CLAMP(100 - (cr.ParamBase[ST_EX_IRREMEDIABLE] / 3), 50, 100)) / 100;
                                int oldAmount = amount;
                                amount = amount * healFactor;
                            }
                        }
                    }
                    //  BNW MECHANICS CHANGE END

                    int healAmount = MIN(amount, cr.Stat[ST_MAX_LIFE] - cr.Stat[ST_CURRENT_HP]);
                    cr.StatBase[ST_CURRENT_HP] = CLAMP(statVal + amount, -9999, cr.Stat[ST_MAX_LIFE]);
                    if(amount < 0 && cr.Stat[ST_CURRENT_HP] < 0)
                        cr.ToDead(Random(0, 1) == 0 ? ANIM2_DEAD_FRONT : ANIM2_DEAD_BACK, null);      // buggy, make macro for safety
                    //  Show heal amount above head, but do not show 0 HP ticks form drugs. (Super Stimpacks)
                    if (healAmount != 0) {
                        FloatingHealTextByDrugPid(cr, healAmount, drugPid);
                    }
                } else if (stat == ST_EX_RANGE_PENALTY) {
                    cr.ParamBase[stat] += amount;
                } else if(stat == ST_POISONING_LEVEL)
                    AffectPoison(cr, amount);                                                         // cr.SetStat(ST_POISONING_LEVEL,CLAMP(statVal+amount,0,2000));
                else if(stat == ST_RADIATION_LEVEL && (drugPid != PID_MUTATED_FRUIT || cr.Perk[PE_WAY_OF_THE_FRUIT] == 0))
                        AffectRadiation(cr, amount);                                                      // cr.SetStat(ST_RADIATION_LEVEL,CLAMP(statVal+amount,0,2000));
                /*else if (stat == ST_EX_RANGE_PENALTY) {
                    DrugsLog("ProcessDrugs :: StatValue = " + statVal);
                }*/
                else
                    continue;

                statVal = cr.Param[stat] - statVal;
                DrugsLog("ProcessDrugs :: StatValue = " + statVal);
                if(statVal > 0)
                    cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_DRUG_STAT_GAIN, "$name @msg game " + STR_PARAM_NAME(stat) + "@$value" + statVal);
                else if(statVal < 0)
                    cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_DRUG_STAT_LOSE, "$name @msg game " + STR_PARAM_NAME(stat) + "@$value" + (-statVal));
            }
        }

//addiction only for chem reliant
        int addict = DrugEffects[index + TABLE_DRUG_ADDICT];

        if (drugPid == PID_STIMPAK || drugPid == PID_SUPER_STIMPAK || drugPid == PID_HYPO || drugPid == PID_HEALING_POWDER) {
            healDrugDuration = DrugEffects[index + TABLE_DURATION(stage)];
        }

        if(stage == 0)         // To withdrawal
        {
            duration = DrugEffects[index + TABLE_DURATION(stage)];
            if(FLAG(flags, DRUG_EFFECT_MUL2_DURATION))
                duration *= 2;
            if(FLAG(flags, DRUG_EFFECT_DIV2_DURATION))
                duration /= 2;

            if (drugPid == PID_WATERBAG || drugPid == PID_BOTTLE_FULL) {
                int totalDuration = /*DrugEffects[index + TABLE_DURATION(0)] + */DrugEffects[index + TABLE_DURATION(1)] + DrugEffects[index + TABLE_DURATION(2)]
                                        + DrugEffects[index + TABLE_DURATION(3)];
                duration = totalDuration;
                DrugsLog("totalDuration = " + DrugEffects[index + TABLE_DURATION(0)] + ", " + DrugEffects[index + TABLE_DURATION(1)] + ", " + DrugEffects[index + TABLE_DURATION(2)] + ", " + DrugEffects[index + TABLE_DURATION(3)] + "." );
                SetDrugTimer(cr, drugPid, GAME_MINUTE(duration));
            } else {
                SetDrugTimer(cr, drugPid, GAME_MINUTE(duration));
            }
        }
        else if(stage == 1)         // To normalize
        {
            duration = DrugEffects[index + TABLE_DURATION(stage)];
            if(FLAG(flags, DRUG_EFFECT_MUL2_DURATION))
                duration *= 2;
            if(FLAG(flags, DRUG_EFFECT_DIV2_DURATION))
                duration /= 2;
        }

    }

    stage++;
    rate = FORM_RATE(stage, flags);
    if (drugPid == PID_STIMPAK || drugPid == PID_SUPER_STIMPAK || drugPid == PID_HYPO || drugPid == PID_HEALING_POWDER) {
        return REAL_SECOND(healDrugDuration);
    }
    if (drugPid == PID_WATERBAG || drugPid == PID_BOTTLE_FULL) {
        duration = DrugEffects[index + TABLE_DURATION(stage)];
        if (stage >= 4) {
            DrugsLog("ProcessDrug :: Pid = " + drugPid + ", Stage = " + stage + ", Duration = " + duration + ", Reseting Drug Event Loop.");
            //SetDrugTimer(cr, drugPid, 0);
            return 0;
        }
    }
    DrugsLog("ProcessDrug :: Pid = " + drugPid + ", Stage = " + stage + ", Duration = " + duration);
    //  if out bounds overflow happens
    return GAME_MINUTE(duration);
}

void DropDrug(Critter& cr, uint16 drugPid, uint stage)
{
    DrugsLog("DropDrug - drug pid = " + drugPid);
    SetDrugTimer(cr, drugPid, 0);
    if(stage == 0 || stage == 3)
        return;                           // Instant effect not happens or already normalize or wait Addidional effect

    int index = GetDrugTableIndex(drugPid);

    if(stage == 1 ||                                          // Instant effect already
       stage == 2 ||                                          // Withdrawal already
       stage == 4)   // Addiction already
    {
        //  FA/RAD-X Timeouts are the begin/end of timeout indexes as in _defines.fos
        DrugsLog("DropDrug - Stages 1,2,3 for drug pid = " + drugPid);
        for(uint i = 0; i < 5; i++)
        {
            int stat = DrugEffects[index + TABLE_STAT(i)];
            int amount = DrugEffects[index + TABLE_AMOUNT(i, stage + (stage == 1 ? -1 : 0))];   // Turn
            if(stage == 1)
                amount = -amount;
            DrugsLog("DropDrug - drug pid = " + drugPid + ", dropping stat = " + stat + ", stage = " + stage + ", amount = " + amount);
            if (stat < STAT_EXT_BEGIN) {
                cr.StatBase[STAT_EXT_BEGIN + stat] += amount;
            } else if (stat == ST_EX_RANGE_PENALTY) {
                //cr.Say(SAY_NETMSG, "Lost Range penalty: " + amount);
                cr.ParamBase[stat] += amount;
            }
        }
    }
}

uint ProcessPsycho(Critter& cr, uint16 drugPid, uint& stage) {
    //  if rate = 1 -> means stage 1, if rate = 2 -> means stage 2
    if (cr.IsDead()) {
        cr.ParamBase[ST_EX_PSYCHO_STAGE_DAMAGE] = 0;
        return 0;
    }

    uint duration = 0;     //  20 seconds
    if (stage == PSYCHO_STAGE_1) {
        cr.ParamBase[ST_EX_PSYCHO_STAGE_DAMAGE] = PSYCHO_FROM_STAGE_DAMAGE(PSYCHO_STAGE_1, 0);
        DrugsLog("ProcessDrug :: PSYCHO -> Pid = " + drugPid + ", stage = " + stage + ", Duration = " + duration);
        if (cr.ParamBase[TRAIT_CHEM_RELIANT] > 0) {
            SetDrugTimer(cr, drugPid, REAL_SECOND(TIMER_PSYCHO_STAGE_1_CHEM_REL + TIMER_PSYCHO_STAGE_2_CHEM_REL));
        } else {
            SetDrugTimer(cr, drugPid, REAL_SECOND(TIMER_PSYCHO_STAGE_1 + TIMER_PSYCHO_STAGE_2));
        }
        stage = PSYCHO_STAGE_2_START;
        if (cr.ParamBase[TRAIT_CHEM_RELIANT] > 0) {
            duration = TIMER_PSYCHO_STAGE_1_CHEM_REL;
        } else {
            duration = TIMER_PSYCHO_STAGE_1;
        }
        return REAL_SECOND(duration);
    }
    if (stage >= PSYCHO_STAGE_2_START && stage < PSYCHO_STAGE_2_END) {
        int old = cr.ParamBase[ST_EX_PSYCHO_STAGE_DAMAGE];
        bool isDead = false;
        bool isBelow = false;
        bool isKo = false;
        cr.ParamBase[ST_EX_PSYCHO_STAGE_DAMAGE] = PSYCHO_CHANGE_STAGE(cr.ParamBase[ST_EX_PSYCHO_STAGE_DAMAGE], stage);

        if (cr.ParamBase[TRAIT_CHEM_RELIANT] > 0) {
            duration = TIMER_PSYCHO_STAGE_2_CHEM_REL / (PSYCHO_STAGE_2_END - PSYCHO_STAGE_2_START);
        } else {
            duration = TIMER_PSYCHO_STAGE_2 / (PSYCHO_STAGE_2_END - PSYCHO_STAGE_2_START);
        }

        int damage = PSYCHO_DAMAGE(cr.ParamBase[ST_EX_PSYCHO_STAGE_DAMAGE]) / (PSYCHO_STAGE_2_END - stage);
        DrugsLog("ProcessDrug :: PSYCHO -> stage = " + stage + ", Damage = " + damage + ", Duration = " + duration + ", old = " + old + ", new stage = " + cr.ParamBase[ST_EX_PSYCHO_STAGE_DAMAGE]);

        int newDamage = (cr.ParamBase[ST_EX_PSYCHO_STAGE_DAMAGE] / PSYCHO_DIVISOR) - damage;
        cr.ParamBase[ST_EX_PSYCHO_STAGE_DAMAGE] = newDamage * PSYCHO_DIVISOR + stage;

        if (damage > 0) {
            if (cr.StatBase[ST_CURRENT_HP] - damage > 0) {
                cr.StatBase[ST_CURRENT_HP] -= damage;
                cr.Say(SAY_NETMSG, "|" + COLOR_ORANGE + " Psycho hemorrhage: " + "|" + COLOR_DORANGE + " -" + damage);
            } else {
                array<CombatRes> results;
                AttackStruct     attack;
                @attack.Attacker = cr;
                attack.Aim = HIT_LOCATION_UNCALLED;
                attack.DmgMin = damage;
                attack.DmgMax = damage;
                attack.DmgType = DAMAGE_TYPE_UNCALLED;
                ApplyDamage(attack, cr, 1, false, true, results, 0);
                FlushResults(results);
            }
        }
        /*
        if(cr.Stat[ST_CURRENT_HP] < 1) {
            int deadHitPoints = cr.Perk[PE_DEAD_MAN_WALKING] > 0 ? __DeadHitPoints : __DeadHitPoints / 2;
            if (cr.Trait[TRAIT_BLOODY_MESS] != 0) {
                deadHitPoints = 0;
            }
            if (cr.Stat[ST_CURRENT_HP] > deadHitPoints && IsHumanoid(cr) && cr.Mode[MODE_NO_KNOCK] == 0) {
            } else {
                target.ToDead(ANIM2_DEAD_FRONT, cr);
            }
        }
        */

        stage++;
        return REAL_SECOND(duration);
    }
    DrugsLog("ProcessDrug :: PSYCHO -> Pid = " + drugPid + ", stage = " + stage + ", Duration = " + duration);
    cr.ParamBase[ST_EX_PSYCHO_STAGE_DAMAGE] = 0;
    return 0;
}


uint cte_Drug(Critter& cr, int identifier, uint& rate)
{
    return ProcessDrug(cr, identifier, rate);
}

uint cte_Psycho(Critter& cr, int identifier, uint& rate) {
    return ProcessPsycho(cr, identifier, rate);
}

void SetDrugTimer(Critter& cr, uint16 drugPid, uint timer)
{

    switch(drugPid)
    {
    case PID_MENTATS:
        _SetTimeout(cr, TO_MENTATS, timer);
        break;
    case PID_BUFFOUT:
        _SetTimeout(cr, TO_BUFFOUT, timer);
        break;
    case PID_NUKA_COLA:
        _SetTimeout(cr, TO_NUKA_COLA, timer);
        break;
    case PID_PSYCHO:
        _SetTimeout(cr, TO_PSYCHO, timer);
        break;
    case PID_BEER:
        _SetTimeout(cr, TO_BEER, timer);
        break;
    case PID_JET:
        _SetTimeout(cr, TO_JET, timer);
        break;
    case PID_CIGARETTES:
        _SetTimeout(cr, TO_CIGARETTES, timer);
        break;
    case PID_RAD_X:
        _SetTimeout(cr, TO_RAD_X, timer);
        break;
    case PID_FISH_SALMON:
        if (timer > 0) {
            cr.RunClientScript("client_timeouts@_add_unsafe", timer / __TimeMultiplier, 0, 0, "Salmon", null);
            DrugsLog("SetDrugTimer() --- Salmon Test: timer = " + timer + ", multiplier = " + __TimeMultiplier + ", now.GetTick() = " + GetTick());
        } else {
            cr.RunClientScript("client_timeouts@remove_unsafe", 0, 0, 0, "Salmon", null);
            DrugsLog("!DropDrugTimer() --- Salmon Test: timer = " + timer + ", multiplier = " + __TimeMultiplier + ", now.GetTick() = " + GetTick());
        }
        break;
    case PID_FISH_TUNA:
        if (timer > 0) {
            cr.RunClientScript("client_timeouts@_add_unsafe", timer / __TimeMultiplier, 0, 0, "Tuna", null);
        } else {
            cr.RunClientScript("client_timeouts@remove_unsafe", 0, 0, 0, "Tuna", null);
            DrugsLog("!DropDrugTimer() --- Tuna Test: timer = " + timer + ", multiplier = " + __TimeMultiplier + ", now.GetTick() = " + GetTick());
        }
        break;
    case PID_FISH_CATFISH:
        if (timer > 0) {
            cr.RunClientScript("client_timeouts@_add_unsafe", timer / __TimeMultiplier, 0, 0, "Catfish", null);
        } else {
            cr.RunClientScript("client_timeouts@remove_unsafe", 0, 0, 0, "Catfish", null);
        }
        break;
    case PID_BOOZE:
        if (timer > 0) {
            cr.RunClientScript("client_timeouts@_add_unsafe", timer / __TimeMultiplier, 0, 0, "Booze", null);
        } else {
            cr.RunClientScript("client_timeouts@remove_unsafe", 0, 0, 0, "Booze", null);
        }
        break;
    case PID_GAMMA_GULP_BEER:
        if (timer > 0) {
            cr.RunClientScript("client_timeouts@_add_unsafe", timer / __TimeMultiplier, 0, 0, "G. G. Beer", null);
        } else {
            cr.RunClientScript("client_timeouts@remove_unsafe", 0, 0, 0, "G. G. Beer", null);
        }
        break;
    case PID_ROENTGEN_RUM:
        if (timer > 0) {
            cr.RunClientScript("client_timeouts@_add_unsafe", timer / __TimeMultiplier, 0, 0, "Roe. Rum", null);
        } else {
            cr.RunClientScript("client_timeouts@remove_unsafe", 0, 0, 0, "Roe. Rum", null);
        }
        break;
    case PID_ROT_GUT:
        if (timer > 0) {
            cr.RunClientScript("client_timeouts@_add_unsafe", timer / __TimeMultiplier, 0, 0, "Rot Gut", null);
        } else {
            cr.RunClientScript("client_timeouts@remove_unsafe", 0, 0, 0, "Rot Gut", null);
        }
        break;
    case PID_BOTTLE_FULL:
    case PID_WATERBAG:
        if (timer > 0) {
            cr.RunClientScript("client_timeouts@_add_unsafe", timer / __TimeMultiplier, 0, 0, "Water", null);
        } else {
            cr.RunClientScript("client_timeouts@remove_unsafe", 0, 0, 0, "Water", null);
        }
        break;
    default:
        break;
    }
}

void UpdateDrugs(Critter& cr)
{
    //DrugsLog("UpdateDrugs( + " + cr.Name + ")");
    if(cr.IsPlayer())
    {
        array<int>  identifiers;
        array<uint> indexes;
        array<uint> durations;
        array<uint> rates;

        uint        count = cr.GetTimeEvents(DrugsIdentifiers, identifiers, indexes, durations, rates);
        for(uint i = 0; i < count; i++)
        {
            if (RATE_TO_STAGE(rates[i]) == 1) {
                //  allow water timer to tick for total duration, other drugs refresh timer
                if (identifiers[i] == PID_WATERBAG || identifiers[i] == PID_BOTTLE_FULL) {
                    //continue;
                } else {
                    SetDrugTimer(cr, identifiers[i], durations[i]);
                }
            }
        }
    }
}

bool RefreshDrug(Critter& cr, uint16 drugPid, uint& rate)
{
    DrugsLog("RefreshDrug( + " + cr.Name + ", " + drugPid + ")");
    if(cr.IsPlayer())
    {

        int         index = GetDrugTableIndex(drugPid);
        uint        flags = RATE_TO_FLAGS(rate);
        uint        stage = RATE_TO_STAGE(rate);
        int         addict = DrugEffects[index + TABLE_DRUG_ADDICT];
        uint        duration = DrugEffects[index + TABLE_DURATION(stage)];

        if(FLAG(flags, DRUG_EFFECT_MUL2_DURATION))
            duration *= 2;
        if(FLAG(flags, DRUG_EFFECT_DIV2_DURATION))
            duration /= 2;

        array<int>  identifiers;
        array<uint> indexes;
        array<uint> durations;
        array<uint> rates;

        uint        count = cr.GetTimeEvents(DrugsIdentifiers, identifiers, indexes, durations, rates);
        for(uint i = 0; i < count; i++)
        {
            if(RATE_TO_STAGE(rates[i]) == 1)
                if(identifiers[i] == int(drugPid))
                {
                    cr.Say(SAY_NETMSG, "Refreshing drug effects.");
                    cr.ChangeTimeEvent(indexes[i], GAME_MINUTE(duration), rates[i]);
                    return true;
                }
        }
        return false;
    }
    return false;
}
