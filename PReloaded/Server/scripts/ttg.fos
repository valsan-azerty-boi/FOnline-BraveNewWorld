//
//  FOClassic: Brave New World
//  Sasabmeg
//
//  ttg.fos
//
//  Tragic: The Garnering - Collectible edition
//  Card generation, some rare cards, NPC scripts to buy them, etc
//

#ifndef __TTG__
#define __TTG__

#include "ttg_h.fos"
#include "_macros.fos"
#include "utils_h.fos"

import void ViewImageClient(Critter& player, string& imageFile, bool limitWindowSizeMaxToImageSize, bool resizeEnabled, bool moveEnabled) from "unsafe_client";
import void MessageGotTragicCard(Critter& player, uint16 cardProto) from "unsafe_client";
import void GainSkillXp(Critter& cr, uint skillNum, int xp) from "skills";


array<uint16> neutralCardPids = {   PID_TRAGIC_NEU_ACTIONBOY,
                                    PID_TRAGIC_NEU_LITTLE_GECKO, PID_TRAGIC_NEU_MUTATED_ANT,
                                    PID_TRAGIC_NEU_SMALL_RADSCOPION, PID_TRAGIC_NEU_MUTATED_PIGRAT, PID_TRAGIC_NEU_MUTATED_MANTIS, PID_TRAGIC_NEU_SPOREPLANT, PID_TRAGIC_NEU_STRAY_DOG,
                                    PID_TRAGIC_NEU_GOLDEN_GECKO, PID_TRAGIC_NEU_KLAMATH_TRAPPER,
                                    PID_TRAGIC_NEU_MUTATED_MOLERAT, PID_TRAGIC_NEU_HUGE_RADSCORPION,
                                    PID_TRAGIC_NEU_FIRE_GECKO
                                    };

bool UseTragicCardOrDeck(Critter& player, Item& item) {
    uint16 pid = item.GetProtoId();
    if (pid == PID_TRAGIC_CARD_DECK) {
        //Log("Tragic Card Deck");
        Item@ card;
        int roll = Random(0, neutralCardPids.length() - 1);
        @card = player.AddItem(neutralCardPids[roll], 1);
        if (valid(card)) {
            player.DeleteItem(PID_TRAGIC_CARD_DECK, 1);
            //player.Say(SAY_NETMSG, "Opening the tragic deck you found a card in good condition.");
            int xp = getCardActionPoints(card.Proto.ProtoId);
            GainSkillXp(player, SK_GAMBLING, xp);
            MessageGotTragicCard(player, card.Proto.ProtoId);
            ShowTragicCard(player, card);
        } else {
            Log("Card is invalid. Proto: " + neutralCardPids[roll]);
            player.Say(SAY_NETMSG, "You failed to open the tragic deck. Either you were too clumsy or serboi was tired :(");
            return false;
        }
    } else {
        //Log("Show Card");
        ShowTragicCard(player, item);
    }
    return true;
}

bool ShowTragicCard(Critter& cr, Item& item) {
    uint16 pid = item.GetProtoId();
    string imageFile;
    switch (pid) {
        //  neutral cost 0
        case PID_TRAGIC_NEU_ACTIONBOY:
            imageFile = "cards\\neutral\\card_perk_actionBoy.png";
            ViewImageClient(cr, imageFile, true, false, true);
            return true;
        //  neutral cost 1
        case PID_TRAGIC_NEU_LITTLE_GECKO:
            imageFile = "cards\\neutral\\card_unit_littleGecko.png";
            ViewImageClient(cr, imageFile, true, false, true);
            return true;
        case PID_TRAGIC_NEU_MUTATED_ANT:
            imageFile = "cards\\neutral\\card_unit_mutatedAnt.png";
            ViewImageClient(cr, imageFile, true, false, true);
            return true;
        //  neutral cost 2
        case PID_TRAGIC_NEU_SMALL_RADSCOPION:
            imageFile = "cards\\neutral\\card_unit_smallRadscorpion.png";
            ViewImageClient(cr, imageFile, true, false, true);
            return true;
        case PID_TRAGIC_NEU_MUTATED_PIGRAT:
            imageFile = "cards\\neutral\\card_unit_mutatedPigrat.png";
            ViewImageClient(cr, imageFile, true, false, true);
            return true;
        case PID_TRAGIC_NEU_MUTATED_MANTIS:
            imageFile = "cards\\neutral\\card_unit_mutatedMantis.png";
            ViewImageClient(cr, imageFile, true, false, true);
            return true;
        case PID_TRAGIC_NEU_SPOREPLANT:
            imageFile = "cards\\neutral\\card_unit_sporePlant.png";
            ViewImageClient(cr, imageFile, true, false, true);
            return true;
        case PID_TRAGIC_NEU_STRAY_DOG:
            imageFile = "cards\\neutral\\card_unit_strayDog.png";
            ViewImageClient(cr, imageFile, true, false, true);
            return true;
        //  neutral cost 3
        case PID_TRAGIC_NEU_GOLDEN_GECKO:
            imageFile = "cards\\neutral\\card_unit_goldenGecko.png";
            ViewImageClient(cr, imageFile, true, false, true);
            return true;
        case PID_TRAGIC_NEU_KLAMATH_TRAPPER:
            imageFile = "cards\\neutral\\card_unit_klamathTrapper.png";
            ViewImageClient(cr, imageFile, true, false, true);
            return true;
        //  neutral cost 4
        case PID_TRAGIC_NEU_MUTATED_MOLERAT:
            imageFile = "cards\\neutral\\card_unit_mutatedMolerat.png";
            ViewImageClient(cr, imageFile, true, false, true);
            return true;
        case PID_TRAGIC_NEU_HUGE_RADSCORPION:
            imageFile = "cards\\neutral\\card_unit_hugeRadscorpion.png";
            ViewImageClient(cr, imageFile, true, false, true);
            return true;
        //  neutral cost 5
        case PID_TRAGIC_NEU_FIRE_GECKO:
            imageFile = "cards\\neutral\\card_unit_fireGecko.png";
            ViewImageClient(cr, imageFile, true, false, true);
            return true;
    default:
        return false;
    }
    return false;
}

//  We need this, because server AS is not able to access Info Text for item proto.
string getCardName(uint pid) {
    switch (pid) {
        case PID_TRAGIC_CARD_DECK:
            return "Tragic Deck";
        //  Neutral 0
        case PID_TRAGIC_NEU_ACTIONBOY:
            return "Action Boy";
        //  Neutral 1
        case PID_TRAGIC_NEU_LITTLE_GECKO:
            return "Little Gecko";
        case PID_TRAGIC_NEU_MUTATED_ANT:
            return "Mutated Ant";
        //  Neutral 2
        case PID_TRAGIC_NEU_SMALL_RADSCOPION:
            return "Small Radscorpion";
        case PID_TRAGIC_NEU_MUTATED_PIGRAT:
            return "Mutated Pigrat";
        case PID_TRAGIC_NEU_MUTATED_MANTIS:
            return "Mutated Mantis";
        case PID_TRAGIC_NEU_SPOREPLANT:
            return "Sporeplant";
        case PID_TRAGIC_NEU_STRAY_DOG:
            return "Stray Dog";
        //  Neutral 3
        case PID_TRAGIC_NEU_GOLDEN_GECKO:
            return "Golden Gecko";
        case PID_TRAGIC_NEU_KLAMATH_TRAPPER:
            return "Klamath Trapper";
        //  Neutral 4
        case PID_TRAGIC_NEU_MUTATED_MOLERAT:
            return "Mutated Molerat";
        case PID_TRAGIC_NEU_HUGE_RADSCORPION:
            return "Huge Radscorpion";
        //  Neutral 5
        case PID_TRAGIC_NEU_FIRE_GECKO:
            return "Fire Gecko";
    }
    return "Unknown Tragic Card";
}

int getCardActionPoints(uint pid) {
    switch (pid) {
        //  Neutral 0
        case PID_TRAGIC_NEU_ACTIONBOY:
            return 0;
        //  Neutral 1
        case PID_TRAGIC_NEU_LITTLE_GECKO:
        case PID_TRAGIC_NEU_MUTATED_ANT:
            return 1;
        //  Neutral 2
        case PID_TRAGIC_NEU_SMALL_RADSCOPION:
        case PID_TRAGIC_NEU_MUTATED_PIGRAT:
        case PID_TRAGIC_NEU_MUTATED_MANTIS:
        case PID_TRAGIC_NEU_SPOREPLANT:
        case PID_TRAGIC_NEU_STRAY_DOG:
            return 2;
        //  Neutral 3
        case PID_TRAGIC_NEU_GOLDEN_GECKO:
        case PID_TRAGIC_NEU_KLAMATH_TRAPPER:
            return 3;
        //  Neutral 4
        case PID_TRAGIC_NEU_MUTATED_MOLERAT:
        case PID_TRAGIC_NEU_HUGE_RADSCORPION:
            return 4;
        //  Neutral 5
        case PID_TRAGIC_NEU_FIRE_GECKO:
            return 5;
    }
    return 0;
}

//  Dialog with Sandro, the ghoulin Hub Maltesse Falcon collecting Tragic the Garnering cards.

/**
 * Show how which cards are required for first deck quest. @lex cards@ is used.
 */
void dlg_ShowCardsForFirstDeck(Critter& player, Critter@ npc, string@ text) {
    if(!IS_DIALOG_GENERATED(text))
        return;

    //  randomize three cards from collectible
    string str = "\r\n";
    array<uint> cardPids;
    for (uint i = 0; i < 3; i++) {
        str += " - ";
        if (GetLvar(player, LVAR_q_tragic_fetch_pid_1 + i) == 0) {
            uint roll = Random(0, neutralCardPids.length() - 1);
            while (cardPids.find(neutralCardPids[roll]) >= 0) {
                roll = Random(0, neutralCardPids.length() - 1);
            }
            SetLvar(player, LVAR_q_tragic_fetch_pid_1 + i, neutralCardPids[roll]);
            cardPids.insertLast(neutralCardPids[roll]);
            str += getCardName(neutralCardPids[roll]);
        } else {
            str += getCardName(GetLvar(player, LVAR_q_tragic_fetch_pid_1 + i));
        }
        if (i < 2) {
            str += "\n";
        }
    }
    text = "$cards" + str + "\n";
}

/**
 * Check if player has the cards in inventory that were requested by Sandro to get their starting deck
 */
bool d_HasRequestedCards(Critter& player, Critter@ npc) {
    for (uint i = 0; i < 3; i++) {
        uint cardPid = GetLvar(player, LVAR_q_tragic_fetch_pid_1 + i);
        if (cardPid > 0) {
            Item@ card = player.GetItem(cardPid, -1);
            if (!valid(card)) {
                //Log("Missing card: " + cardPid);
                return false;
            }
        } else {
            //Log("A card had a wrong pid at Tragic starter deck quest when checking for requested cards.");
            return false;
        }
    }
    return true;
}

/**
 * Removes the requested cards from inventory that were requested by Sandro to get their starting deck.
 */
void r_RemoveRequestedCards(Critter& player, Critter@ npc) {
    for (uint i = 0; i < 3; i++) {
        uint cardPid = GetLvar(player, LVAR_q_tragic_fetch_pid_1 + i);
        SetLvar(player, LVAR_q_tragic_fetch_pid_1 + i, 0);
        if (cardPid > 0) {
            player.DeleteItem(cardPid, 1);
        } else {
            Log("A card had a wrong pid at Tragic starter deck quest when trying to remove requested cards.");
        }
    }
}

/*
void r_SetQuestVar(Critter& player, Critter@ npc, int variable, int time, int value) {
    //  must pass player id too...
    uint[] values = { 0, 0, 0 };
    values[0] = variable;
    values[1] = time;
    values[2] = value;
    if (values[0] <= 0 || values[1] <= 0) {}
        Log("Invalid values for r_SetQuestVar(" + variable + ", " + time + ", " + value + ") - variable and time must be > 0");
    }
    if (values[2] < 0 || values[2] >= 100) {
        Log("Invalid values for r_SetQuestVar(" + variable + ", " + time + ", " + value + ") - value must be in quest range (0 - 99).");
    }
    CreateTimeEvent(AFTER(REAL_MS(time + animationDuration)), "e_SetQuestVar", values, false);
}

uint e_SetQuestVar(array<uint>@ values) {
}

*/


#endif	//	__TTG__
