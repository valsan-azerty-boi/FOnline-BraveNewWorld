//Vice Dice 2018

//client_drawing.fos

#ifndef __CLIENT_DRAWING_MODULE__
#define __CLIENT_DRAWING_MODULE__

#include "client_drawing_h.fos"
#include "../_colors.fos"

bool SpritesInit = false;

//array<Sprite@> CachedSprites(CACHED_SPRITES_COUNT, null);
/*
array<LoadedSprite@> LoadedSprites(0); // deprecated, replaced with CachedSprites
array<MovingSprite@> MovingSprites(0); // deprecated
*/
WeaponRadiusChosen@ wepRadChos;

array<CustomChosenHex@> CustomChosenHexes;

array<WMZoneRender@> WMZonesRender;

array<RayMap@> RaysMap;
uint rays; // counters =)

array<BurstRay@> BurstRays;
uint burstRays;

array<DelayedText@> DelayedTexts;
uint texts;

array<MuzzleFlash@> MuzzleFlashes;
uint muzzleFlashes;

array<BurstMuzzle@> BurstMuzzles;
uint burstMuzzles;

bool __ConfigDrawRays = true;


#ifdef __CLIENT
//import int checkBonus(ItemCl@ it, int bonusType) from "client_combat"; // 2238 modding system specific

class WMZoneRender : IWMZoneRender
{
	int realx, realy, renderx, rendery, length;
	uint color, layer;
	uint8 drawType;
	array<int> vertices;


 	WMZoneRender(int xin, int yin, int colorin, int lengthin)
	{
		this.realx = xin;
		this.renderx = xin;
		this.realy = yin;
		this.rendery = yin;
		this.color = colorin;
		this.length = lengthin;
	}

	void Draw(uint layer)
	{
		if(this.layer == layer)
		{
			RecalculateVertices();
			DrawPrimitive(drawType, vertices);
		}
	}

	void SetX(int xin)
	{
		this.realx = xin;
	}

	void SetY(int yin)
	{
		this.realy = yin;
	}

	void SetColor(uint colorin)
	{
		this.color = colorin;
	}

	void SetDrawType(uint8 type)
	{
		this.drawType = type;
	}

	void SetZoneLength(int len)
	{
		this.length = len;
	}

	void SetLayer(uint layer)
	{
		this.layer = layer;
	}

	void GenerateVertices()
	{
		vertices.insertLast(realx);
		vertices.insertLast(realy);
		vertices.insertLast(color);

		vertices.insertLast(realx+length);
		vertices.insertLast(realy);
		vertices.insertLast(color);

		vertices.insertLast(realx);
		vertices.insertLast(realy+length);
		vertices.insertLast(color);

		vertices.insertLast(realx+length);
		vertices.insertLast(realy+length);
		vertices.insertLast(color);
	}

	void RecalculateVertices()
	{
		vertices[0] = realx / __WorldmapZoom + __WorldmapOffsetX;
		vertices[1] = realy / __WorldmapZoom + __WorldmapOffsetY;

		vertices[3] = (realx+length) / __WorldmapZoom + __WorldmapOffsetX;
		vertices[4] =  realy / __WorldmapZoom + __WorldmapOffsetY;

		vertices[6] = realx / __WorldmapZoom + __WorldmapOffsetX;
		vertices[7] = (realy+length) / __WorldmapZoom + __WorldmapOffsetY;

		vertices[9] =  (realx+length) / __WorldmapZoom + __WorldmapOffsetX;
		vertices[10] = (realy+length) / __WorldmapZoom + __WorldmapOffsetY;
	}
}

class RayMap : IRayMap
{
	int mapx1, mapy1, mapx2, mapy2, offsetX, offsetY;
	uint color1, color2, rayRenderTime, Id, opacity;
	uint8 drawType, dir;
	array<int> data = array<int>(6);
	array<uint16> rayTimeStart = array<uint16>(8);
	uint16 rayExMs, rayExSec;

	int8 yInc, xInc;
	RayMap(int mapx1In, int mapy1In, int mapx2In, int mapy2In, uint renderTime, int offsetXIn, int offsetYIn)
	{
		this.mapx1 = mapx1In;
		this.mapy1 = mapy1In;
		this.mapx2 = mapx2In;
		this.mapy2 = mapy2In;
		this.offsetX = offsetXIn;
		this.offsetY = offsetYIn;
		this.rayRenderTime = renderTime;
		this.opacity = 1; // default
		this.dir = GetDirection(mapx1, mapy1, mapx2, mapy2);
		this.yInc = (this.dir == 1 || this.dir == 4) ? 1 : 0;
		this.xInc = yInc > 0 ? 0 : 1;
		GetTime(this.rayTimeStart[0],this.rayTimeStart[1],this.rayTimeStart[2],this.rayTimeStart[3],this.rayTimeStart[4],this.rayTimeStart[5],this.rayTimeStart[6],this.rayTimeStart[7]);
	}

	void SetDrawType(uint8 type)
	{
		this.drawType = type;
	}

	void SetColors(uint color1In, uint color2In)
	{
		this.color1 = color1In;
		this.color2 = color2In;
	}

	void SetId(uint id)
	{
		this.Id = id;
	}

	void SetOpacity(uint opacity)
	{
		this.opacity = opacity;
		this.data.resize(opacity*6);
	}

	void Draw()
	{
		GetTime(this.rayTimeStart[0], this.rayTimeStart[0], this.rayTimeStart[0], this.rayTimeStart[0], this.rayTimeStart[0], this.rayTimeStart[0], rayExSec, rayExMs);	// Get the current time
		uint msDiff  = rayExMs - rayTimeStart[7]  + ((rayExSec - rayTimeStart[6])*1000);

		if(((uint(rayExSec - rayTimeStart[6])) >= (rayRenderTime/1000)) && ((uint(rayExMs - rayTimeStart[7])) > rayRenderTime%1000)) // check out if the current time has gone too far from the initial time of rendering call
		{
			rays -= 1;
			@RaysMap[Id] = null;
		}
		else
		{
			RecalculatePoints(msDiff);
			DrawPrimitive(drawType, data);
		}

	}

	void GenerateData()
	{
		GetHexPos(mapx1, mapy1, data[0], data[1]);
		data[1] -= (35/(__SpritesZoom)); // source > humanoid critters around 70 px tall
		data[2] = color1;

		GetHexPos(mapx2, mapy2, data[3], data[4]);
		data[3] -= (offsetX/(__SpritesZoom));
		data[4] -= (offsetY/(__SpritesZoom));
		data[5] = color2;
	}

	void RecalculatePoints(uint msPass)
	{
		uint alpha = MAX(int(255 - float(255 * (float(msPass)/float(rayRenderTime)) )), 0) ;

 		for(uint i = 0, j = opacity; i<j; i++) //move your calcs for points here
		{
			GetHexPos(mapx1, mapy1, data[i*6], data[(i*6)+1]);
			data[(i*6)]   +=  xInc*i;
			data[(i*6)+1] -= (35/(__SpritesZoom) - yInc*i);  // source > humanoid critters around 70 px tall
			data[(i*6)+2] = COLOR_CHANGE_ALPHA(color1, CLAMP(float(alpha)-float(100), 0, 255));

			GetHexPos(mapx2, mapy2, data[(i*6)+3], data[(i*6)+4]);
			data[(i*6)+3] -= (offsetX/(__SpritesZoom) - xInc*i);
			data[(i*6)+4] -= (offsetY/(__SpritesZoom) - yInc*i);
			data[(i*6)+5] = COLOR_CHANGE_ALPHA(color2, alpha);

		}
/*
		GetHexPos(mapx1, mapy1, data[0], data[1]);
		data[1] -= (35/(__SpritesZoom));  // source > humanoid critters around 70 px tall
		data[2] =  COLOR_CHANGE_ALPHA(color1, CLAMP(float(alpha)-float(100), 0, 255));

		GetHexPos(mapx2, mapy2, data[3], data[4]);
		data[3] -= (offsetX/(__SpritesZoom));
		data[4] -= (offsetY/(__SpritesZoom));

		data[5] = COLOR_CHANGE_ALPHA(color2, alpha);
		Message("ALPHA: "+ alpha);
*/
	}
}


class BurstRay : IBurstRay
{
	array<RayMap@> Rays; // y e a
	uint Id, currentRay, opacity;
	array<uint16> rayTimeStart = array<uint16>(8);
	uint16 rayExMs, rayExSec;


	BurstRay(int amount, int mapx1In, int mapy1In, int mapx2In, int mapy2In, uint renderTime, int rayOffsetX, int rayOffsetY)
	{
		if(amount>0)
		{
			this.Rays.resize(amount);
			for(uint i = 0, j = this.Rays.length(); i<j; i++)
			{
				RayMap@ ray = RayMap(mapx1In, mapy1In, mapx2In, mapy2In, renderTime, Random(rayOffsetX-(rayOffsetX*2),rayOffsetX*2), Random(0,rayOffsetY));
				@this.Rays[i] = ray;

			}
			this.currentRay = 0;
			//Log("burst rays size is " +  BurstRays.length());
			GetTime(this.rayTimeStart[0],this.rayTimeStart[1],this.rayTimeStart[2],this.rayTimeStart[3],this.rayTimeStart[4],this.rayTimeStart[5],this.rayTimeStart[6],this.rayTimeStart[7]);
		}
		else
			Log("trying to create a burst ray sequence with 0 length, abort!");
	}

	void SetDrawType(uint8 type)
	{
		for(uint i = 0, j = this.Rays.length(); i<j; i++)
		{
			this.Rays[i].drawType = type;
		}
	}

	void SetColors(uint color1In, uint color2In)
	{
		for(uint i = 0, j = this.Rays.length(); i<j; i++)
		{
			this.Rays[i].color1 = color1In;
			this.Rays[i].color2 = color2In;
		}
	}

	void SetId(uint id)
	{
		this.Id = id;
	}
	void SetOpacity(uint opacity)
	{
		this.opacity = opacity;
		for(uint i = 0, j = Rays.length(); i < j; i++)
		{
			Rays[i].SetOpacity(opacity);
		}
	}


	void Draw()
	{
		if(currentRay<this.Rays.length()-1)
		{
			GetTime(this.rayTimeStart[0], this.rayTimeStart[0], this.rayTimeStart[0], this.rayTimeStart[0], this.rayTimeStart[0], this.rayTimeStart[0], rayExSec, rayExMs);	// Get the current time
			uint msDiff  = rayExMs - rayTimeStart[7]  + ((rayExSec - rayTimeStart[6])*1000);

			if(((uint(rayExSec - rayTimeStart[6])) >= (this.Rays[currentRay].rayRenderTime/1000)) && ((uint(rayExMs - rayTimeStart[7])) > this.Rays[currentRay].rayRenderTime%1000)) // check out if the current time has gone too far from the initial time of rendering call
			{
				currentRay += 1;
				GetTime(this.rayTimeStart[0],this.rayTimeStart[1],this.rayTimeStart[2],this.rayTimeStart[3],this.rayTimeStart[4],this.rayTimeStart[5],this.rayTimeStart[6],this.rayTimeStart[7]);
			}
			this.Rays[currentRay].RecalculatePoints(msDiff);
			DrawPrimitive(this.Rays[currentRay].drawType, this.Rays[currentRay].data);
		}
		else
		{
			burstRays -= 1;
			@BurstRays[Id] = null;
		}
	}

}

class WeaponRadiusChosen
{
	ItemCl@ chosenWeapon;
	uint color;
	array<int> data = array<int>(21,0); // yes, 7 points right
	uint8 drawType;

	WeaponRadiusChosen(uint color)
	{
		this.color = color;
		//@wepRadChos = @this;
		for(uint8 i = 0, j = data.length()/3; i<j; i++)
		{
			this.data[(i*3)+2] = this.color;
		}
	}

 	void Draw()
	{
		RecalculateVertices();
		DrawPrimitive(drawType, data);
	}

	void SetDrawType(uint8 type)
	{
		this.drawType = type;
	}

 	void RecalculateVertices()
	{
		CritterCl@ chosen = GetChosen();
 		@chosenWeapon = _CritGetItemHand(chosen);
		if(valid(chosenWeapon) && chosenWeapon.GetType() == ITEM_TYPE_WEAPON)
		{
			uint16 hexX, hexY;
			uint8 wepMode  = chosenWeapon.Mode&0x0F;
			uint wpnMaxDist = _WeaponMaxDist(chosenWeapon.Proto, wepMode);
			/*wpnMaxDist += checkBonus(chosenWeapon, BONUS_WEAPON_MAX_RANGE);*/

			uint8 wepSkill = 0;
			switch(wepMode)
			{
				case 0:
					wepSkill = chosenWeapon.Proto.Weapon_Skill_0;
					break;
				case 1:
					wepSkill = chosenWeapon.Proto.Weapon_Skill_1;
					break;
				case 2:
					wepSkill = chosenWeapon.Proto.Weapon_Skill_2;
					break;

			}
/*			if(wepSkill == SK_SMALL_GUNS || wepSkill == SK_BIG_GUNS || wepSkill == SK_ENERGY_WEAPONS)
				wpnMaxDist*= MARKSMAN_MOD;
*/

			if(IsGrenade(chosenWeapon))
			{
				if(chosen.Perk[PE_HEAVE_HO]!=0)
				{
					wpnMaxDist += chosen.Perk[PE_HEAVE_HO]*3;
				}
			}



			for(uint8 i = 0, j = data.length()/3; i<j; i++) // each point is 3 cells
			{
				hexX = chosen.HexX;
				hexY = chosen.HexY;
				MoveHexByDir(hexX,hexY, i%6, wpnMaxDist);
				GetHexPos(hexX, hexY, this.data[i*3], this.data[(i*3)+1]);
			}
		}
	}
}

class CustomChosenHex
{
	uint color, radius;
	array<int> data = array<int>(21,0); // yes, 7 points
	uint8 drawType;

	CustomChosenHex(uint color, uint radius)
	{
		this.color = color;
		this.radius = radius;
		for(uint8 i = 0, j = data.length()/3; i<j; i++)
		{
			this.data[(i*3)+2] = this.color;
		}
	}

 	void Draw()
	{
		RecalculateVertices();
		DrawPrimitive(drawType, data);
	}

	void SetDrawType(uint8 type)
	{
		this.drawType = type;
	}


 	void RecalculateVertices()
	{
 		CritterCl@ chosen = GetChosen();

		if(valid(chosen))
		{
			uint16 hexX, hexY;
			for(uint8 i = 0, j = data.length()/3; i<j; i++) // each point is 3 cells
			{
				hexX = chosen.HexX;
				hexY = chosen.HexY;
				MoveHexByDir(hexX,hexY, i%6, this.radius);
				GetHexPos(hexX, hexY, this.data[i*3], this.data[(i*3)+1]);
			}
		}
	}
}

/*
// deprecated, cvet invented this already
class LoadedSprite
{
	uint id;
	string name;
	uint layer, color, screenId, frmCount;
	int posX, posY, w, h;
	bool scratch, center;

	LoadedSprite(string@ name, uint pathId, uint layer, uint color, int posx, int posy, int w, int h, bool scratch, bool center, uint screenId)
	{
		this.id = LoadSprite(name, pathId);
		this.name = name;
		this.layer = layer;
		this.color = color;
		this.posX  = posx;
		this.posY  = posy;
		this.w 	   = w;
		this.h 	   = h;
		this.scratch = scratch;
		this.center  = center;
		this.frmCount = GetSpriteCount(this.id);
		this.screenId = screenId;
	}

	void Draw(int sprIndex)
	{
		DrawSprite(this.id, sprIndex, this.posX, this.posY, this.w, this.h, this.scratch, this.center, this.color);
	}

}

// deprecated since inherited from LoadedSprite
class MovingSprite : LoadedSprite
{
	int offXFrame, offYFrame, xLim, yLim, initialX, initialY;

	MovingSprite(string@ name, uint pathId, uint layer, uint color, int initialX, int initialY, int w, int h, bool scratch, bool center, uint screenId, int offXFrame, int offYFrame, int xLim, int yLim)
	{
		super(name, pathId, layer, color, initialX, initialY, w, h, scratch, center, screenId);
		this.offXFrame = offXFrame;
		this.offYFrame = offYFrame;
		this.xLim 	   = xLim;
		this.yLim      = yLim;
		this.initialX  = initialX;
		this.initialY  = initialY;
	}

	void Draw(uint sprIndex)
	{
		this.posX += this.offXFrame;
		this.posY += this.offYFrame;
		if( this.posX < -100 || this.posX > xLim || this.posY < -100 || this.posY > yLim )
		{
			this.posX = Random(0,__ScreenWidth);
			this.posY = this.initialY + Random(-20,-99);
		}
		LoadedSprite::Draw(sprIndex);
	}

}
*/
class DelayedText : IDelayedText
{
	uint color, Id, time;
	int posX, posY, offX, offY;
	string text;
	uint16 mapX, mapY, undef, textExSec, textExMs, width;
	bool map;
	uint8 font;

	array<uint16> textTimeStart = array<uint16>(8);


	DelayedText(uint16 posX, uint16 posY, uint color, uint8 font, uint time, string text, bool map, uint16 mapX, uint16 mapY, int offX, int offY)
	{
		this.posX = posX;
		this.posY = posY;
		this.color = color;
		this.time  = time;
		this.text  = text;
		this.map   = map;
		this.font  = font;
		this.offX  = offX;
		this.offY  = offY;
		this.width = this.text.length() * 10;
		GetTime(this.textTimeStart[0],this.textTimeStart[1],this.textTimeStart[2],this.textTimeStart[3],this.textTimeStart[4],this.textTimeStart[5],this.textTimeStart[6],this.textTimeStart[7]);
		if(map)
		{
			this.mapX = mapX;
			this.mapY = mapY;
		}
	}


	void SetId(uint id)
	{
		this.Id = id;
	}

	void Draw()
	{
		if(this.map)
			MapToScreenPos();

		this.posX -= this.width/2;

		DrawText(this.text,	this.posX+this.offX/__SpritesZoom, this.posY+this.offY/__SpritesZoom, this.text.length()*10, 100, this.color,  this.font,	FT_CENTERX);

		GetTime(undef, undef, undef, undef, undef, undef, textExSec, textExMs);
		if(((uint(textExSec - textTimeStart[6])) >= (time/1000)) && ((uint(textExMs - textTimeStart[7])) > time%1000))
		{
			@DelayedTexts[this.Id] = null;
			texts--;
		}
	}

	void MapToScreenPos()
	{
		GetHexPos(this.mapX, this.mapY, this.posX, this.posY);
	}

}

class MuzzleFlash : IMuzzleFlash
{
	uint color1, color2, Id, Type;
	uint16 mapx1, mapy1;
	uint8 drawType;
	array<int> data = array<int>(6);
	array<int> vector = array<int>(2);

	array<int> dataBolt = array<int>(18);


	array<uint16> timeStart = array<uint16>(8);
	array<float> speed 	= array<float>(2);
	uint16 exMs, exSec, time;

	MuzzleFlash(int mapx1In, int mapy1In, int mapx2In, int mapy2In, uint16 speed, int offsetXIn, int offsetYIn)
	{
		int destx = 0, desty = 0;
		this.mapx1 = mapx1In;
		this.mapy1 = mapy1In;
		GetHexPos(mapx1, mapy1, data[0], data[1]);
		this.data[3] = this.data[0];
		this.data[4] = this.data[1];
		GetHexPos(mapx2In, mapy2In, destx, desty);
		this.vector[0] =  (destx+(offsetXIn/__SpritesZoom)) - this.data[0];
		this.vector[1] =  (desty+(offsetYIn/__SpritesZoom)) - this.data[1];
		this.speed[0]  = speed*(this.vector[0]/(abs(this.vector[0]) + abs(this.vector[1])))/1000;
		this.speed[1]  = speed*(this.vector[1]/(abs(this.vector[0]) + abs(this.vector[1])))/1000;
		this.time  = (abs(this.vector[0]+this.vector[1])/(abs(this.speed[0] + this.speed[1])));
		GetTime(this.timeStart[0], this.timeStart[0], this.timeStart[0], this.timeStart[0], this.timeStart[0], this.timeStart[0], timeStart[6], timeStart[7]);
	}

	void SetDrawType(uint8 type)
	{
		this.drawType = type;
	}

	void SetColors(uint color1In, uint color2In)
	{
		this.color1 = color1In;
		this.color2 = color2In;
	}

	void SetId(uint id)
	{
		this.Id = id;
	}

	void SetType(uint type)
	{
		this.Type = type;
	}

	void Draw()
	{
		GetTime(this.timeStart[0], this.timeStart[0], this.timeStart[0], this.timeStart[0], this.timeStart[0], this.timeStart[0], exSec, exMs);	// Get the current time
		uint msDiff  = exMs - timeStart[7]  + ((exSec - timeStart[6])*1000);


		if((msDiff >= (time%10000))) // check out if the current time has gone too far from the initial time of rendering call
		{
			muzzleFlashes -= 1;
			@MuzzleFlashes[Id] = null;
		}
		else
		{
			RecalculatePoints(msDiff);
			if (Type == MUZZLE_TYPE_DEFAULT) {
                DrawPrimitive(DRAW_PRIMITIVE_LINELIST, data);
			} else if (Type == MUZZLE_TYPE_BOLT_SMALL || Type == MUZZLE_TYPE_BOLT_MEDIUM || Type == MUZZLE_TYPE_BOLT_LARGE) {
                DrawPrimitive(DRAW_PRIMITIVE_TRIANGLEFAN, dataBolt);
			}

		}

	}


	void RecalculatePoints(uint msPass)
	{

		GetHexPos(mapx1, mapy1, data[0], data[1]);
		/*
		if (msPass < 100) {
            Message(":: mapx1=" + mapx1 + ", mapy1=" + mapy1 + ", data[0]=" + data[0] + ", data[1]=" + data[1] + ", speed[0]=" + speed[0] + ", speed[1]=" + speed[1] + ", msPass=" + msPass);
		}*/
        data[0] = (data[0] + (speed[0]*msPass));
        data[1] = (data[1] + (-32/__SpritesZoom)+(speed[1]*msPass));

		if (Type == MUZZLE_TYPE_BOLT_SMALL) {
            data[3] = (data[0] - (speed[0]*6));
            data[4] = (data[1] - (speed[1]*6));
		} else if (Type == MUZZLE_TYPE_BOLT_MEDIUM) {
            data[3] = (data[0] - (speed[0]*12));
            data[4] = (data[1] - (speed[1]*12));
		} else if (Type == MUZZLE_TYPE_BOLT_LARGE) {
            data[3] = (data[0] - (speed[0]*16));
            data[4] = (data[1] - (speed[1]*16));
		} else {
            data[3] = (data[0] - (speed[0]*msPass/10));
            data[4] = (data[1] - (speed[1]*msPass/10));
		}

		data[2] = color1;
		data[5] = color2;
		/*
		if ((msPass/10*10)%100 == 0) {
            Message(":: data[0]=" + data[0] + ", data[1]=" + data[1] + ", data[3]=" + data[3] + ", data[4]=" + data[4] + ", msPass=" + msPass);
		}*/


		if (Type == MUZZLE_TYPE_BOLT_SMALL || Type == MUZZLE_TYPE_BOLT_MEDIUM || Type == MUZZLE_TYPE_BOLT_LARGE) {
			uint boltRadius = 3;
			/*
			if (Type == MUZZLE_TYPE_BOLT_MEDIUM) {
                boltRadius = 4;
			}
			if (Type == MUZZLE_TYPE_BOLT_LARGE) {
                boltRadius = 5;
			}*/

			dataBolt[0] = data[3];
			dataBolt[1] = data[4];

			dataBolt[3] = data[0] - boltRadius;
			dataBolt[4] = data[1];

			dataBolt[6] = data[0];
			dataBolt[7] = data[1] - boltRadius;

			dataBolt[9] = data[0] + boltRadius;
			dataBolt[10] = data[1];

			dataBolt[12] = data[0];
			dataBolt[13] = data[1] + boltRadius;

			dataBolt[15] = data[0] - boltRadius;
			dataBolt[16] = data[1];

			dataBolt[2] = color2;
			dataBolt[5] = color1;
			dataBolt[8] = color1;
			dataBolt[11] = color1;
			dataBolt[14] = color1;
			dataBolt[17] = color1;
		}
	}
}

// muzzle factory, in fact, some bad way to create muzzles sync.
class BurstMuzzle : IBurstMuzzle
{
	array<MuzzleFlash@> muzzles; // y e a
	uint Id, amount, delay, currentMuzzle, maxDelay, speed, color1, color2, Type;
	int offsetX, offsetY, distanceFactor;
	uint16 mapx1, mapy1, mapx2, mapy2;
	uint8 drawType;

	array<uint16> timeStart = array<uint16>(8);
	uint16 exMs, exSec;

	BurstMuzzle(int mapx1In, int mapy1In, int mapx2In, int mapy2In, uint speed, uint delay, int amount, int offsetX, int offsetY)
	{
		if(amount>0)
		{
			this.speed = speed;
			this.mapx1 = mapx1In;
			this.mapy1 = mapy1In;
			this.mapx2 = mapx2In;
			this.mapy2 = mapy2In;
			this.offsetX = offsetX;
			this.offsetY = offsetY;
			this.delay = delay;
			this.currentMuzzle = 0;
			this.amount = amount;
			this.muzzles.resize(this.amount);
			this.maxDelay = this.amount*this.delay;
			this.distanceFactor = GetDistantion(mapx1, mapy1, mapx2, mapy2);
			GetTime(this.timeStart[0],this.timeStart[1],this.timeStart[2],this.timeStart[3],this.timeStart[4],this.timeStart[5],this.timeStart[6],this.timeStart[7]);
		}
	}

	void SetDrawType(uint8 type)
	{
		this.drawType = type;
	}

	void SetColors(uint color1In, uint color2In)
	{

		this.color1 = color1In;
		this.color2 = color2In;

	}

	void SetId(uint id)
	{
		this.Id = id;
	}

	void SetType(uint type)
	{
		this.Type = type;
	}

	void Draw()
	{
		GetTime(this.timeStart[0], this.timeStart[0], this.timeStart[0], this.timeStart[0], this.timeStart[0], this.timeStart[0], exSec, exMs);	// Get the current time
		uint msDiff  = exMs - timeStart[7]  + ((exSec - timeStart[6])*1000);
		uint timeDiff = msDiff - (((this.currentMuzzle)*this.delay)%this.maxDelay);


		if(timeDiff >= this.delay)
		{

			for(uint i = 0, j = timeDiff/this.delay; i<j; i++)
			{
				if(currentMuzzle >= amount)
				{
					burstMuzzles -= 1;
					@BurstMuzzles[this.Id] = null;
					return;
				}

				MuzzleFlash@ burstMuzzle = MuzzleFlash(this.mapx1, this.mapy1, this.mapx2, this.mapy2, Random(1500,this.speed), Random(-this.offsetX-distanceFactor,this.offsetX+distanceFactor), Random(-this.offsetY-distanceFactor,this.offsetY+distanceFactor));
				burstMuzzle.SetColors(this.color1, this.color2);
				burstMuzzle.SetDrawType(this.drawType);
				burstMuzzle.SetId(FindFreeMuzzleCell());
				burstMuzzle.SetType(Type);
				@MuzzleFlashes[burstMuzzle.Id] = burstMuzzle;
				@this.muzzles[amount-(amount-this.currentMuzzle)] = burstMuzzle;

				currentMuzzle++;
			}
		}

	}


}

uint FindFreeRayCell()
{
	for(uint i = 0, j = RaysMap.length(); i<j; i++)
	{
		if(@RaysMap[i]==null)
			return i;
	}

	RaysMap.insertLast(null);
	return RaysMap.length()-1;

}


uint FindFreeBurstRayCell()
{
	for(uint i = 0, j = BurstRays.length(); i<j; i++)
	{
		if(@BurstRays[i]==null)
			return i;
	}

	BurstRays.insertLast(null);
	return BurstRays.length()-1;
}
/*
Sprite@ GetCachedSprite(int spriteDef)
{
	if(valid(CachedSprites[spriteDef]))
		return CachedSprites[spriteDef];
	else
		return null;
}


uint FindLoadedSpriteByName(string@ name)
{
	for(uint i = 0, j = LoadedSprites.length(); i<j; i++)
	{
		if(LoadedSprites[i].name == name)
			return LoadedSprites[i].id;

	}
	return 0;
}

string GetLoadedSpriteNameById(uint Id)
{
	for(uint i = 0, j = LoadedSprites.length(); i<j; i++)
	{
		if(LoadedSprites[i].id == Id)
			return LoadedSprites[i].name;

	}
	return "";
}

uint FindFreeLoadedSpriteCell()
{
	for(uint i = 0, j = LoadedSprites.length(); i<j; i++)
	{
		if(@LoadedSprites[i] == null)
			return i;

	}
	LoadedSprites.insertLast(null);
	return LoadedSprites.length()-1;
}

void DeleteLoadedSprite(uint id)
{
	for(uint i = 0, j = LoadedSprites.length(); i<j; i++)
	{
		if(LoadedSprites[i].id == id)
		{
			@LoadedSprites[i]=null;
			return;
		}
	}
	Log("Error while deleting sprite from manager memory (does'nt exist in it's context)");
	return;
}

uint FindFreeMovCell()
{
	for(uint i = 0, j = MovingSprites.length(); i<j; i++)
	{
		if(@MovingSprites[i] == null)
			return i;

	}
	MovingSprites.insertLast(null);
	return MovingSprites.length()-1;
}

uint FindMovByName(string@ name)
{
	for(uint i = 0, j = MovingSprites.length(); i<j; i++)
	{
		if(MovingSprites[i].name == name)
			return MovingSprites[i].id;

	}
	return 0;
}

string GetMovNameById(uint Id)
{
	for(uint i = 0, j = MovingSprites.length(); i<j; i++)
	{
		if(MovingSprites[i].id == Id)
			return MovingSprites[i].name;

	}
	return "";
}

*/
uint FindFreeTextCell()
{
	for(uint i = 0, j = DelayedTexts.length(); i<j; i++)
	{
		if(@DelayedTexts[i]==null)
			return i;
	}

	DelayedTexts.insertLast(null);
	return DelayedTexts.length()-1;
}

uint FindFreeMuzzleCell()
{
	for(uint i = 0, j = MuzzleFlashes.length(); i<j; i++)
	{
		if(@MuzzleFlashes[i]==null)
			return i;
	}

	MuzzleFlashes.insertLast(null);
	return MuzzleFlashes.length()-1;
}

uint FindFreeBurstMuzzleCell()
{
	for(uint i = 0, j = BurstMuzzles.length(); i<j; i++)
	{
		if(@BurstMuzzles[i]==null)
			return i;
	}

	BurstMuzzles.insertLast(null);
	return BurstMuzzles.length()-1;
}

// array-drawings
void DrawRays()
{
	if(rays>0)
	{
		for(uint i = 0, j = RaysMap.length(); i<j; i++)
		{
			if(@RaysMap[i]!=null)
				RaysMap[i].Draw();
		}
	}
}

void DrawBurstRays()
{
	if(burstRays>0)
	{
		for(uint i = 0, j = BurstRays.length(); i<j; i++)
		{
			if(@BurstRays[i]!=null)
				BurstRays[i].Draw();
		}
	}
}
/*
void DrawLoadedSprites(uint layer, uint screenId)
{
	for(uint i = 0, j = LoadedSprites.length(); i<j; i++)
	{
		if(@LoadedSprites[i] != null)
		{
			if(LoadedSprites[i].layer == layer && LoadedSprites[i].screenId == screenId)
			{
				LoadedSprites[i].Draw(0);
			}
		}
	}
}


void DrawScreenMovings(uint layer, uint screenId)
{
	for(uint i = 0, j = MovingSprites.length(); i<j; i++)
	{
		if(@MovingSprites[i] != null)
		{
			if(MovingSprites[i].layer == layer && MovingSprites[i].screenId == screenId)
			{
				MovingSprites[i].Draw(0);
			}
		}
	}
}*/

void DrawTexts()
{
	if(texts>0)
	{
		for(uint i = 0, j = DelayedTexts.length(); i<j; i++)
		{
			if(@DelayedTexts[i]!=null)
				DelayedTexts[i].Draw();
		}
	}
}

void DrawMuzzleFlashes()
{
	if(muzzleFlashes>0)
	{
		for(uint i = 0, j = MuzzleFlashes.length(); i<j; i++)
		{
			if(@MuzzleFlashes[i]!=null)
				MuzzleFlashes[i].Draw();
		}
	}
}

void DrawBurstMuzzles()
{
	if(burstMuzzles>0)
	{
		for(uint i = 0, j = BurstMuzzles.length(); i<j; i++)
		{
			if(@BurstMuzzles[i]!=null)
			{
				BurstMuzzles[i].Draw();
			}
		}
	}
}

void DrawWepRadius(CritterCl@ chosen)
{
	if(valid(wepRadChos))
	{
		ItemCl@ chosenItem = _CritGetItemHand(chosen);
		if(valid(chosenItem))
		{
			if(chosenItem.GetType() == ITEM_TYPE_WEAPON)
			wepRadChos.Draw();
		}

	}
}

void DrawCustomRadiuses()
{
	if(CustomChosenHexes.length()!=0)
	{
		for(uint i =0, j=CustomChosenHexes.length(); i<j; i++)
		{
			CustomChosenHexes[i].Draw();
		}
	}
}

void DrawWMZones() // require manual define for ZONE_IDX, and some checks, aswell as layer input argument, to control the layers overlapping
				   // ( intended to work with a single-dimensional array holding WMZoneRender objects, just like *vanilla* worldmap cells macros )
{
/* 	for(uint zx = MAX(0, 0  - (__GmapOffsetX*__GmapZoom/(__GlobalMapZoneLength))), countx = MIN(WMZonesRender.length()/__GlobalMapHeight, (__ScreenWidth-__GmapOffsetX)*__GmapZoom/__GlobalMapZoneLength  )  ; zx<countx; zx++)
	{
		for(uint zy = MAX(0, 0  - (__GmapOffsetY*__GmapZoom/(__GlobalMapZoneLength))), county = MIN(WMZonesRender.length()/__GlobalMapWidth, (__ScreenHeight-__GmapOffsetY)*__GmapZoom/__GlobalMapZoneLength ); zy<county; zy++)
		{
			if(WMZonesRender[ZONE_IDX(zx,zy)].color!=0)
				WMZonesRender[ZONE_IDX(zx,zy)].Draw(layer);
		}
	}
*/
}


// API

IRayMap@ CreateRay( int[] drawData) // need 2 points to draw ray between them, each point is 3 array cells = X,Y,Color, so, its 6 cells minimum for a single ray.
{
	if(__ConfigDrawRays)
	{
		RayMap@ ray = RayMap(drawData[RAYDATA_MAPX1], drawData[RAYDATA_MAPY1], drawData[RAYDATA_MAPX2], drawData[RAYDATA_MAPY2], drawData[RAYDATA_TIME], 0, 35);
		ray.SetColors(drawData[2], drawData[5]);
		ray.SetDrawType(DRAW_PRIMITIVE_LINELIST);
		ray.SetId(FindFreeRayCell());
		ray.SetOpacity(2);
		@RaysMap[ray.Id] = ray;

		rays += 1;

		return ray;
	}

	return null;
}

IBurstRay@ CreateBurstRay(int [] drawData)
{
	if(__ConfigDrawRays)
	{
		BurstRay@ burstRay = BurstRay(drawData[RAYDATA_AMOUNT], drawData[RAYDATA_MAPX1], drawData[RAYDATA_MAPY1], drawData[RAYDATA_MAPX2], drawData[RAYDATA_MAPY2], drawData[RAYDATA_TIME], 10, 35);
		burstRay.SetColors(drawData[2], drawData[5]);
		burstRay.SetDrawType(DRAW_PRIMITIVE_LINELIST);
		burstRay.SetId(FindFreeBurstRayCell());
		burstRay.SetOpacity(4);
		@BurstRays[burstRay.Id] = burstRay;

		burstRays += 1;

		return burstRay;
	}
	return null;
}

IMuzzleFlash@ CreateMuzzle(int[] drawData, uint type)
{

	if(__ConfigDrawRays)
	{
		MuzzleFlash@ muzzle = MuzzleFlash(drawData[MUZZLEDATA_MAPX1], drawData[MUZZLEDATA_MAPY1], drawData[MUZZLEDATA_MAPX2],
		drawData[MUZZLEDATA_MAPY2], drawData[MUZZLEDATA_SPEED], Random(-10,10), Random(-15,25));

		muzzle.SetColors(drawData[2], drawData[5]);
		muzzle.SetDrawType(DRAW_PRIMITIVE_LINELIST);
		muzzle.SetId(FindFreeMuzzleCell());
		muzzle.SetType(type);
		@MuzzleFlashes[muzzle.Id] = muzzle;

		muzzleFlashes += 1;
		return muzzle;

	}
	return null;
}

IBurstMuzzle@ CreateBurstMuzzle(int[] drawData, uint type)
{
	if(__ConfigDrawRays)
	{
		BurstMuzzle@ burstMuzzle = BurstMuzzle(drawData[MUZZLEDATA_MAPX1], drawData[MUZZLEDATA_MAPY1], drawData[MUZZLEDATA_MAPX2],
		drawData[MUZZLEDATA_MAPY2], drawData[MUZZLEDATA_SPEED], drawData[MUZZLEDATA_DELAY], drawData[MUZZLEDATA_AMOUNT], Random(-25,35), Random(-15,35));

		burstMuzzle.SetColors(drawData[2], drawData[5]);
		burstMuzzle.SetDrawType(DRAW_PRIMITIVE_LINELIST);
		burstMuzzle.SetId(FindFreeBurstMuzzleCell());
		burstMuzzle.SetType(type);
		@BurstMuzzles[burstMuzzle.Id] = burstMuzzle;

		muzzleFlashes += drawData[8];
		burstMuzzles += 1;

		return burstMuzzle;

	}
	return null;
}
/*
void InitSprites()
{
	if(!SpritesInit)
	{
		int randomPicSet = Random(0,0);

		Sprite@ regSprite 	   = Sprite();
		Sprite@ mainMenuSprite = Sprite();

		if(regSprite.Load("reg"+__ScreenWidth+"x"+__ScreenHeight+"_"+randomPicSet+".png", PT_ART_INTRFACE))
			@CachedSprites[CACHED_REG_SPRITE]	    = regSprite;
		if(mainMenuSprite.Load("mm"+__ScreenWidth+"x"+__ScreenHeight+"_"+randomPicSet+".png", PT_ART_INTRFACE))
			@CachedSprites[CACHED_MAIN_MENU_SPRITE] = mainMenuSprite;

		SpritesInit = true;
	}
}
*/
// to use with RunClientScript
IDelayedText@ _CreateDelayedText(int param0, int param1, int param2, string@ param3, int[]@ param4)
{
	DelayedText@ text = DelayedText(param0, param1, param2, uint(param4[0]), param4[1], param3, param4[2]>0 ? true : false, param4[3], param4[4], param4[5], param4[6]);
	text.SetId(FindFreeTextCell());
	@DelayedTexts[text.Id] = text;

	texts += 1;
	return text;

}

// to use with RunClientScript
void _DrawPenetratingRay(int param0, int param1, int param2, string@ param3, int[]@ param4)
{

	int[] rayInfo;
	rayInfo.resize(8);
	bool ray = false;

	uint16 hx = param4[0], hy = param4[1], tx = param4[2], ty = param4[3];
	uint weaponPid = param4[4];

	GetHexCoord(hx, hy,  tx,  ty , 0.0f, param2);

	if(weaponPid==PID_M72_GAUSS_RIFLE || weaponPid==PID_PK12_GAUSS_PISTOL)
	{
		rayInfo[2] = 0x00FFFFFF; // white transparent
		rayInfo[5] = int(COLOR_WHITE);
		ray = true;
	}
	else // defalut color
	{
		rayInfo[2] = int(COLOR_LGREEN);
		rayInfo[5] = int(COLOR_LGREEN);
		ray = true;
	}

	if(ray)
	{
		rayInfo[0] = hx;
		rayInfo[1] = hy;
		rayInfo[3] = tx;//critsLine[critsLine.length()-1].HexX;
		rayInfo[4] = ty;//critsLine[critsLine.length()-1].HexY;
		rayInfo[7] = 150;
		CreateRay(rayInfo);
	}

}

void CreateCustomRadius(uint color, uint radius)
{
	CustomChosenHex@ cch = CustomChosenHex(color,radius);
	cch.SetDrawType(DRAW_PRIMITIVE_LINESTRIP);
	CustomChosenHexes.insertLast(cch);
}
/*
IWeaponRadiusChosen@ CreateWeaponRadius(uint color)
{
	WeaponRadiusChosen@ wrc = WeaponRadiusChosen(color);
	wrc.SetDrawType(DRAW_PRIMITIVE_LINESTRIP);
	@wepRadChos = wrc;
	return wrc;
}*/




#endif
#endif
