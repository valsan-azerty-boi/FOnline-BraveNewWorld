//
// FOnline: 2238
// Rotators
//
// combat_h.fos
//

#ifndef _COMBAT_H_
#define _COMBAT_H_


//  Fallout animations
#define ANIM1_FALLOUT_UNARMED               (1)
#define ANIM1_FALLOUT_DEAD                  (2)
#define ANIM1_FALLOUT_KNOCKOUT              (3)
#define ANIM1_FALLOUT_KNIFE                 (4)
#define ANIM1_FALLOUT_CLUB                  (5)
#define ANIM1_FALLOUT_HAMMER                (6)
#define ANIM1_FALLOUT_SPEAR                 (7)
#define ANIM1_FALLOUT_PISTOL                (8)
#define ANIM1_FALLOUT_UZI                   (9)
#define ANIM1_FALLOUT_SHOOTGUN              (10)
#define ANIM1_FALLOUT_RIFLE                 (11)
#define ANIM1_FALLOUT_MINIGUN               (12)
#define ANIM1_FALLOUT_ROCKET_LAUNCHER       (13)
#define ANIM1_FALLOUT_AIM                   (14)

#define ANIM_ACTION_TIME_DEFAULT            (400)
#define ANIM_ACTION_TIME_THROW_SPEAR        (720)


#define HF_RESIST_TRESHOLD_1        (10)
#define HF_RESIST_TRESHOLD_2        (15)

// Critical hit/miss flags
#define HF_KNOCKOUT                (0x00000001)
#define HF_KNOCKDOWN               (0x00000002)
#define HF_CRIPPLED_LEFT_LEG       (0x00000004)
#define HF_CRIPPLED_RIGHT_LEG      (0x00000008)
#define HF_CRIPPLED_LEFT_ARM       (0x00000010)
#define HF_CRIPPLED_RIGHT_ARM      (0x00000020)
#define HF_BLINDED                 (0x00000040)
#define HF_DEATH                   (0x00000080)
#define HF_ON_FIRE                 (0x00000400)
#define HF_BYPASS_ARMOR            (0x00000800)
#define HF_DROPPED_WEAPON          (0x00004000)
#define HF_LOST_NEXT_TURN          (0x00008000)
#define HF_RANDOM                  (0x00200000)

#define MF_KNOCKED_DOWN            (0x00000002)
#define MF_ON_FIRE                 (0x00000400)
#define MF_WEAPON_EXPLODED         (0x00001000)
#define MF_WEAPON_DESTROYED        (0x00002000)
#define MF_WEAPON_DROPPED          (0x00004000)
#define MF_LOST_NEXT_TURN          (0x00008000)
#define MF_HIT_SELF                (0x00010000)
#define MF_LOST_REST_OF_AMMO       (0x00020000)
#define MF_FIRED_DUD_SHOT          (0x00040000)
#define MF_HURT_SELF               (0x00080000)
#define MF_HIT_RANDOMLY            (0x00100000)
#define MF_CRIPPLED_RANDOM_LIMB    (0x00200000)
#define MF_WAS_KILLED              (0x10000000)

// for WeaponSubtype
#define WS_UNARMED                 (1)
#define WS_MELEE                   (2) //no longer used since all melee weapons use SK_UNARMED so they are identified as WS_UNARMED
#define WS_THROWING                (3)
#define WS_GUN                     (4)

#define _GetCritterArmor           # (cr_, head_)(cr_.GetItem(0, (head_) ? SLOT_HEAD : SLOT_ARMOR))
#define COMBAT_AMMO_AP             # (ammo_) (valid(ammo_) ? (ammo_.Ammo_DTDiv > 0) : false)
// todo: move to proto
#define COMBAT_WEAPON_ALLOWS_SD    # (__weapon)     (__weapon.Proto.ProtoId == PID_14MM_PISTOL || __weapon.Proto.ProtoId == PID_223_PISTOL)

#define ANIM_FLY_TIMEFACTOR_RUN    (250)
#define ANIM_FLY_TIMEFACTOR_WALK   (500)

// melee weapon attack mode by Cubik & John (from 2155)
#define MODE_PRIMARY_ATTACK                 (0)
#define MODE_SECONDARY_ATTACK               (1)

#ifdef __SERVER
shared class AttackStruct
{
    Critter@   Attacker = null;
    Item@      RealWeapon = null;
    uint16     Hx = 0;
    uint16     Hy = 0;
    uint16     Tx = 0;
    uint16     Ty = 0;
    uint8      Aim = HIT_LOCATION_UNCALLED;
    bool       AimHead = false;
    bool       IsBurst = false;
    bool       BloodyMess = false;
    bool       CombatMessage = false;
    bool       IsUnarmed = false;
    int        WeaponPerk = -1;
    uint8      WeaponSubtype = 0;
    int        DmgMin = 0;
    int        DmgMax = 0;
    int        DmgType = 0;
    int        BonusDmg = 0;
    int        DmgMul = 4;
    int        DRMod = 0;
    int        DMMod = 1;
    int        DDMod = 1;
    uint       TargetId = 0;
    bool       TargetHit = false;
    bool       ShowHitAnimForce = false;
    ProtoItem@ Ammo = null;
    bool       sneakAttack = false;
	uint16     ammoPid;
	uint16     weaponPid;
	int8       weaponMode; // for swing/thrust melee weapons

    void set_Aim(uint8 aim)
    {
        Aim = aim;
        AimHead = aim == HIT_LOCATION_HEAD || aim == HIT_LOCATION_EYES;
    }

    uint8 get_Aim()
    {
        return Aim;
    }

	int SelectWeaponBonus(int Int_Val_WeaponBonus)
	{
		if(valid(RealWeapon))
		{
			if(RealWeapon.Val0 == Int_Val_WeaponBonus) return  RealWeapon.Val5;
			if(RealWeapon.Val1 == Int_Val_WeaponBonus) return  RealWeapon.Val6;
			if(RealWeapon.Val2 == Int_Val_WeaponBonus) return  RealWeapon.Val7;
			if(RealWeapon.Val3 == Int_Val_WeaponBonus) return  RealWeapon.Val8;
			if(RealWeapon.Val4 == Int_Val_WeaponBonus) return  RealWeapon.Val9;
			return 0;
		}
		else return 0;
	}

};
#endif

#endif // _COMBAT_H_
